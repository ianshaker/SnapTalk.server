#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: join(__dirname, '..', '.env') });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ topic_id
 */
async function testMultipleBotsScenario() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –±–æ—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ topic_id
    const testData = [
      {
        client_id: 'test-bot-1',
        topic_id: 123,
        chat_id: -1001111111111, // –ë–æ—Ç 1
        fingerprint_data: JSON.stringify({ test: 'bot1' })
      },
      {
        client_id: 'test-bot-2', 
        topic_id: 123, // –¢–æ—Ç –∂–µ topic_id!
        chat_id: -1002222222222, // –ë–æ—Ç 2
        fingerprint_data: JSON.stringify({ test: 'bot2' })
      },
      {
        client_id: 'test-bot-1-topic-456',
        topic_id: 456,
        chat_id: -1001111111111, // –ë–æ—Ç 1, –¥—Ä—É–≥–æ–π —Ç–æ–ø–∏–∫
        fingerprint_data: JSON.stringify({ test: 'bot1-topic456' })
      }
    ];
    
    console.log('üìù –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await supabase
      .from('client_topics')
      .delete()
      .like('client_id', 'test-bot-%');
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const { data: insertData, error: insertError } = await supabase
      .from('client_topics')
      .insert(testData);
    
    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', insertError);
      return;
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã');
    
    // –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ topic_id=123 –∏ chat_id –±–æ—Ç–∞ 1
    console.log('\nüîç –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ topic_id=123 –¥–ª—è –±–æ—Ç–∞ 1');
    const { data: test1, error: error1 } = await supabase
      .from('client_topics')
      .select('client_id, topic_id, chat_id')
      .eq('topic_id', 123)
      .eq('chat_id', -1001111111111);
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', test1);
    if (test1?.length === 1 && test1[0].client_id === 'test-bot-1') {
      console.log('‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–æ—Ç–∞ 1');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ topic_id=123 –∏ chat_id –±–æ—Ç–∞ 2
    console.log('\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ topic_id=123 –¥–ª—è –±–æ—Ç–∞ 2');
    const { data: test2, error: error2 } = await supabase
      .from('client_topics')
      .select('client_id, topic_id, chat_id')
      .eq('topic_id', 123)
      .eq('chat_id', -1002222222222);
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', test2);
    if (test2?.length === 1 && test2[0].client_id === 'test-bot-2') {
      console.log('‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–æ—Ç–∞ 2');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ topic_id=123 (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ–±–∞)
    console.log('\nüîç –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ topic_id=123 (–±–µ–∑ chat_id)');
    const { data: test3, error: error3 } = await supabase
      .from('client_topics')
      .select('client_id, topic_id, chat_id')
      .eq('topic_id', 123);
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', test3);
    if (test3?.length === 2) {
      console.log('‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º topic_id');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    console.log('\nüîç –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç (topic_id + chat_id)');
    const { data: test4, error: error4 } = await supabase
      .from('client_topics')
      .insert({
        client_id: 'test-duplicate',
        topic_id: 123,
        chat_id: -1001111111111, // –î—É–±–ª–∏–∫–∞—Ç!
        fingerprint_data: JSON.stringify({ test: 'duplicate' })
      });
    
    if (error4) {
      console.log('‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('–û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–∞—è):', error4.message);
    } else {
      console.log('‚ùå –¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    }
    
    // –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è webhook –ª–æ–≥–∏–∫–∏
    console.log('\nüîç –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è webhook –ª–æ–≥–∏–∫–∏');
    await testWebhookLogic(123, -1001111111111, 'test-bot-1');
    await testWebhookLogic(123, -1002222222222, 'test-bot-2');
    await testWebhookLogic(456, -1001111111111, 'test-bot-1-topic-456');
    await testWebhookLogic(999, -1001111111111, null); // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await supabase
      .from('client_topics')
      .delete()
      .like('client_id', 'test-bot-%');
    
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –≤ webhook
 */
async function testWebhookLogic(topicId, chatId, expectedClientId) {
  console.log(`\n  üîç Webhook —Å–∏–º—É–ª—è—Ü–∏—è: topicId=${topicId}, chatId=${chatId}`);
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ (topic_id + chat_id)
  let { data: clientTopics, error } = await supabase
    .from('client_topics')
    .select('client_id, topic_id, chat_id')
    .eq('topic_id', topicId)
    .eq('chat_id', chatId)
    .maybeSingle();
  
  let clientId = clientTopics?.client_id;
  let foundVia = 'primary_search';
  
  // Fallback: –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ topic_id (–¥–ª—è legacy –∑–∞–ø–∏—Å–µ–π)
  if (!clientId) {
    const fallbackResult = await supabase
      .from('client_topics')
      .select('client_id, topic_id, chat_id')
      .eq('topic_id', topicId)
      .is('chat_id', null)
      .maybeSingle();
    
    clientId = fallbackResult.data?.client_id;
    foundVia = 'fallback_search';
  }
  
  console.log(`    –†–µ–∑—É–ª—å—Ç–∞—Ç: clientId=${clientId || 'null'}, foundVia=${foundVia}`);
  
  if (expectedClientId) {
    if (clientId === expectedClientId) {
      console.log(`    ‚úÖ –£—Å–ø–µ—Ö: –Ω–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç`);
    } else {
      console.log(`    ‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª—Å—è ${expectedClientId}, –ø–æ–ª—É—á–µ–Ω ${clientId}`);
    }
  } else {
    if (!clientId) {
      console.log(`    ‚úÖ –£—Å–ø–µ—Ö: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å)`);
    } else {
      console.log(`    ‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–æ –Ω–∞–π–¥–µ–Ω ${clientId}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (process.argv[1] && import.meta.url.endsWith(process.argv[1].split('/').pop())) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤...');
  testMultipleBotsScenario()
    .then(() => {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
} else {
  console.log('üì¶ –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
}

export { testMultipleBotsScenario };