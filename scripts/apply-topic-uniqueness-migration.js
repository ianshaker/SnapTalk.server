#!/usr/bin/env node

import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES –º–æ–¥—É–ª—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE; // –ò—Å–ø–æ–ª—å–∑—É–µ–º service role –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîß Supabase URL:', supabaseUrl);
console.log('üîß Service Role Key:', supabaseKey ? 'Loaded' : 'Missing');

async function applyTopicUniquenessMigration() {
  console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ topic_id...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ topic_id...');
    await checkForDuplicates();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    console.log('\nüîß –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ Supabase Dashboard ‚Üí SQL Editor:\n');
    await showManualMigrationSteps();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  }
}

async function checkForDuplicates() {
  const { data: allTopics, error } = await supabase
    .from('client_topics')
    .select('topic_id, client_id')
    .not('topic_id', 'is', null);
    
  if (error) throw error;
  
  const topicToClient = {};
  let duplicatesFound = false;
  
  allTopics.forEach(row => {
    if (topicToClient[row.topic_id]) {
      console.log(`‚ö†Ô∏è  –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è topic_id: ${row.topic_id} (–∫–ª–∏–µ–Ω—Ç—ã: ${topicToClient[row.topic_id]}, ${row.client_id})`);
      duplicatesFound = true;
    } else {
      topicToClient[row.topic_id] = row.client_id;
    }
  });
  
  if (duplicatesFound) {
    console.log('\nüîç –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è topic_id. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Ö –æ—á–∏—Å—Ç–∏—Ç—å.');
    await showDuplicateTopics();
    throw new Error('–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è topic_id');
  } else {
    console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é');
  }
}

async function showManualMigrationSteps() {
  const SUPERGROUP_ID = process.env.SUPERGROUP_ID || '-1001234567890';
  
  console.log('-- –®–∞–≥ 1: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É chat_id');
  console.log('ALTER TABLE client_topics ADD COLUMN IF NOT EXISTS chat_id BIGINT;\n');
  
  console.log('-- –®–∞–≥ 2: –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏');
  console.log(`UPDATE client_topics SET chat_id = ${SUPERGROUP_ID} WHERE chat_id IS NULL;\n`);
  
  console.log('-- –®–∞–≥ 3: –°–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å');
  console.log('CREATE UNIQUE INDEX IF NOT EXISTS idx_client_topics_unique_topic_chat');
  console.log('ON client_topics (topic_id, chat_id)');
  console.log('WHERE topic_id IS NOT NULL AND chat_id IS NOT NULL;\n');
  
  console.log('‚úÖ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –º–∏–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
}

async function verifyMigration() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è topic_id
    const { data: allTopics, error } = await supabase
      .from('client_topics')
      .select('topic_id, client_id')
      .not('topic_id', 'is', null);
      
    if (error) throw error;
    
    const topicToClient = {};
    let duplicatesFound = false;
    
    allTopics.forEach(row => {
      if (topicToClient[row.topic_id]) {
        console.log(`‚ö†Ô∏è  –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è topic_id: ${row.topic_id} (–∫–ª–∏–µ–Ω—Ç—ã: ${topicToClient[row.topic_id]}, ${row.client_id})`);
        duplicatesFound = true;
      } else {
        topicToClient[row.topic_id] = row.client_id;
      }
    });
    
    if (!duplicatesFound) {
      console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å topic_id –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
      console.log(`üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö topic_id: ${Object.keys(topicToClient).length}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
  }
}

async function showDuplicateTopics() {
  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è topic_id:');
  
  const { data: allTopics, error } = await supabase
    .from('client_topics')
    .select('*')
    .not('topic_id', 'is', null)
    .order('topic_id');
    
  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return;
  }
  
  const topicGroups = {};
  allTopics.forEach(row => {
    if (!topicGroups[row.topic_id]) {
      topicGroups[row.topic_id] = [];
    }
    topicGroups[row.topic_id].push(row);
  });
  
  Object.entries(topicGroups).forEach(([topicId, records]) => {
    if (records.length > 1) {
      console.log(`\nüìç Topic ID: ${topicId} (${records.length} –∑–∞–ø–∏—Å–µ–π):`);
      records.forEach((record, index) => {
        console.log(`   ${index + 1}. Client: ${record.client_id}, Created: ${record.created_at}`);
      });
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é (ES –º–æ–¥—É–ª—å –≤–µ—Ä—Å–∏—è)
if (import.meta.url === new URL(process.argv[1], 'file:').href) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏...');
  applyTopicUniquenessMigration().catch(console.error);
} else {
  console.log('üìÑ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –º–æ–¥—É–ª—å');
}

export { applyTopicUniquenessMigration };