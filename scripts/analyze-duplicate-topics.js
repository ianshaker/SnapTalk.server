/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è topicId –≤ —Ç–∞–±–ª–∏—Ü–µ client_topics
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
 */

import { sb } from '../src/config/env.js';

async function analyzeDuplicateTopics() {
  if (!sb) {
    console.log('‚ùå Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    return;
  }

  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è topicId –≤ client_topics...');
    
    const { data, error } = await sb
      .from('client_topics')
      .select('topic_id, client_id, visitor_id, created_at, page_url')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ topicId
    const topicGroups = {};
    data.forEach(row => {
      if (!topicGroups[row.topic_id]) {
        topicGroups[row.topic_id] = [];
      }
      topicGroups[row.topic_id].push(row);
    });

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è topicId
    const duplicates = Object.entries(topicGroups)
      .filter(([topicId, rows]) => rows.length > 1);

    console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===');
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${data.length}`);
    console.log(`üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö topicId: ${Object.keys(topicGroups).length}`);
    console.log(`‚ö†Ô∏è  –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è topicId: ${duplicates.length}`);

    if (duplicates.length > 0) {
      console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è topicId!');
      console.log('–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram\n');
      
      duplicates.forEach(([topicId, rows]) => {
        console.log(`üìç TopicId: ${topicId} (${rows.length} –∑–∞–ø–∏—Å–µ–π)`);
        rows.forEach((row, index) => {
          console.log(`   ${index + 1}. ClientId: ${row.client_id}`);
          console.log(`      VisitorId: ${row.visitor_id || 'null'}`);
          console.log(`      Created: ${row.created_at}`);
          console.log(`      URL: ${row.page_url || 'null'}`);
          console.log('');
        });
      });

      console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      console.log('1. –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ topic_id');
      console.log('2. –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)');
      console.log('3. –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
    } else {
      console.log('\n‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è topicId –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      console.log('–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    const clientCounts = {};
    data.forEach(row => {
      clientCounts[row.client_id] = (clientCounts[row.client_id] || 0) + 1;
    });
    
    console.log(`üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${Object.keys(clientCounts).length}`);
    console.log('üìà –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–ø–∏–∫–æ–≤:');
    Object.entries(clientCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .forEach(([clientId, count]) => {
        console.log(`   ${clientId}: ${count} —Ç–æ–ø–∏–∫–æ–≤`);
      });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeDuplicateTopics();