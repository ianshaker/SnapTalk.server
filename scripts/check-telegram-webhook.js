#!/usr/bin/env node

/**
 * üîç –ü–†–û–í–ï–†–ö–ê TELEGRAM WEBHOOK
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ webhook –¥–ª—è Telegram –±–æ—Ç–∞
 * –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
 */

import dotenv from 'dotenv';
import axios from 'axios';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');
dotenv.config({ path: join(projectRoot, '.env') });

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_SECRET = process.env.TELEGRAM_WEBHOOK_SECRET;

async function checkWebhook() {
  try {
    if (!BOT_TOKEN) {
      console.log('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      process.exit(1);
    }
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram webhook...');
    console.log('ü§ñ Bot Token:', BOT_TOKEN.slice(0, 10) + '...');
    console.log('üîê Webhook Secret:', WEBHOOK_SECRET || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    
    if (response.data.ok) {
      const info = response.data.result;
      
      console.log('\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û WEBHOOK:');
      console.log('=' .repeat(50));
      
      if (info.url) {
        console.log('‚úÖ Webhook URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', info.url);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ URL –Ω–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        const expectedPattern = `/telegram/webhook/${WEBHOOK_SECRET}`;
        if (info.url.includes(expectedPattern)) {
          console.log('‚úÖ URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É');
        } else {
          console.log('‚ö†Ô∏è  URL –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É');
          console.log('   –û–∂–∏–¥–∞–µ—Ç—Å—è: ...', expectedPattern);
        }
      } else {
        console.log('‚ùå Webhook URL –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
        console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node scripts/setup-telegram-webhook.js <YOUR_DOMAIN>');
      }
      
      console.log('üìà –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', info.pending_update_count || 0);
      console.log('üîó –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', info.max_connections || '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      
      if (info.last_error_date) {
        console.log('‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:', new Date(info.last_error_date * 1000));
        console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', info.last_error_message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
      } else {
        console.log('‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      }
      
      if (info.ip_address) {
        console.log('üåê IP –∞–¥—Ä–µ—Å:', info.ip_address);
      }
      
      console.log('=' .repeat(50));
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (!info.url) {
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook —Å –ø–æ–º–æ—â—å—é:');
        console.log('   node scripts/setup-telegram-webhook.js https://your-domain.com');
        console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ https://your-domain.com –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω');
      } else if (info.pending_update_count > 0) {
        console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:');
        console.log(`–£ –≤–∞—Å ${info.pending_update_count} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
        console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –¥–ª—è –∏—Ö –æ—á–∏—Å—Ç–∫–∏');
      } else {
        console.log('\nüéâ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      }
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', response.data.description);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
checkWebhook();