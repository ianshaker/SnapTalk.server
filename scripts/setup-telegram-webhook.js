#!/usr/bin/env node

/**
 * üîß –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM WEBHOOK
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook URL –¥–ª—è Telegram –±–æ—Ç–∞,
 * —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/setup-telegram-webhook.js <YOUR_DOMAIN>
 * 
 * –ü—Ä–∏–º–µ—Ä:
 * node scripts/setup-telegram-webhook.js https://your-app.render.com
 */

import dotenv from 'dotenv';
import axios from 'axios';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');
dotenv.config({ path: join(projectRoot, '.env') });

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_SECRET = process.env.TELEGRAM_WEBHOOK_SECRET;

async function setupWebhook() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const domain = process.argv[2];
    
    if (!domain) {
      console.log('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω');
      console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/setup-telegram-webhook.js <YOUR_DOMAIN>');
      console.log('–ü—Ä–∏–º–µ—Ä: node scripts/setup-telegram-webhook.js https://your-app.render.com');
      process.exit(1);
    }
    
    if (!BOT_TOKEN) {
      console.log('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      process.exit(1);
    }
    
    if (!WEBHOOK_SECRET) {
      console.log('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_WEBHOOK_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      process.exit(1);
    }
    
    const webhookUrl = `${domain}/telegram/webhook/${WEBHOOK_SECRET}`;
    
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook...');
    console.log('üì° Webhook URL:', webhookUrl);
    console.log('ü§ñ Bot Token:', BOT_TOKEN.slice(0, 10) + '...');
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook...');
    const deleteResponse = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`);
    
    if (deleteResponse.data.ok) {
      console.log('‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ webhook:', deleteResponse.data.description);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    console.log('üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook...');
    const setResponse = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      url: webhookUrl,
      drop_pending_updates: true // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    });
    
    if (setResponse.data.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      console.log('üìã –î–µ—Ç–∞–ª–∏:', setResponse.data.result);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', setResponse.data.description);
      process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook...');
    const infoResponse = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    
    if (infoResponse.data.ok) {
      const info = infoResponse.data.result;
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
      console.log('  - URL:', info.url);
      console.log('  - Pending updates:', info.pending_update_count);
      console.log('  - Last error date:', info.last_error_date ? new Date(info.last_error_date * 1000) : 'None');
      console.log('  - Last error message:', info.last_error_message || 'None');
      console.log('  - Max connections:', info.max_connections);
    }
    
    console.log('\nüéâ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –¢–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä');
    console.log('üîó Webhook URL:', webhookUrl);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
setupWebhook();