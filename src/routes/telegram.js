import express from 'express';
import { sb, SUPERGROUP_ID } from '../config/env.js';
import { memoryMap } from '../services/telegramService.js';
import { getTelegramToClientService } from '../services/telegramToClientService.js';

const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ WebSocket
let pushToClient = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pushToClient –∏–∑ server.js
export function setPushToClient(pushFunction) {
  pushToClient = pushFunction;
}

// ===== Webhook: Telegram -> —Å–∞–π—Ç (–æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞) =====
router.post('/webhook/:WEBHOOK_SECRET', async (req, res) => {
  try {
    const { WEBHOOK_SECRET } = req.params;
    
    console.log('üéØ [TELEGRAM WEBHOOK] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    const telegramService = getTelegramToClientService();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
    const result = await telegramService.processIncomingMessage(req.body);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (result.success) {
      console.log('‚úÖ [TELEGRAM WEBHOOK] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', {
        messageId: result.messageId,
        clientId: result.clientId,
        clientName: result.clientName,
        processingTime: result.processingTime + 'ms',
        websocketDelivery: result.delivery?.websocket?.success,
        supabaseDelivery: result.delivery?.supabase?.success
      });
    } else {
      console.log('‚ùå [TELEGRAM WEBHOOK] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
        errorType: result.error?.type,
        errorMessage: result.error?.message,
        messageId: result.error?.messageId,
        processingTime: result.error?.processingTime
      });
    }
    
    return res.sendStatus(200);
  } catch (e) {
    console.error('‚ùå [TELEGRAM WEBHOOK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      error: e.message,
      stack: e.stack,
      requestBody: req.body,
      timestamp: new Date().toISOString(),
      url: req.url,
      method: req.method
    });
    return res.sendStatus(200);
  }
});

export default router;