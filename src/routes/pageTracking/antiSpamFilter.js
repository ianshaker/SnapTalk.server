/**
 * üõ°Ô∏è ANTI-SPAM FILTER MODULE
 * 
 * –ú–æ–¥—É–ª—å –∞–Ω—Ç–∏—Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º—ã
 */

import { logWithTimestamp } from './utils.js';

// –ö—ç—à –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞: visitorId -> { lastEvent, lastPath, events }
const antiSpamCache = new Map();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞
const ANTI_SPAM_DELAY = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
const VISITOR_CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
const MAX_VISITOR_EVENTS = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –∫—ç—à–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è

/**
 * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞–Ω—Ç–∏—Å–ø–∞–º-–∫—ç—à–∞
 */
function cleanupAntiSpamCache() {
  const now = Date.now();
  let cleanedCount = 0;
  
  for (const [visitorId, visitorData] of antiSpamCache.entries()) {
    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç
    if (now - visitorData.lastEvent > VISITOR_CACHE_TTL) {
      antiSpamCache.delete(visitorId);
      cleanedCount++;
    } else {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
      if (visitorData.events && visitorData.events.length > MAX_VISITOR_EVENTS) {
        visitorData.events = visitorData.events.slice(-MAX_VISITOR_EVENTS);
      }
    }
  }
  
  if (cleanedCount > 0) {
    logWithTimestamp(`Cleaned ${cleanedCount} expired visitors from anti-spam cache`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è visitorId
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @param {string} pagePath - –ü—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {number} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @returns {boolean} - true –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
 */
export function shouldProcessEvent(visitorId, pagePath, clientId) {
  const now = Date.now();
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!visitorId || typeof visitorId !== 'string') {
    logWithTimestamp(`Anti-spam: invalid visitorId provided`);
    return false;
  }
  
  if (!pagePath || typeof pagePath !== 'string') {
    logWithTimestamp(`Anti-spam: invalid pagePath provided`);
    return false;
  }
  
  // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
  if (Math.random() < 0.01) { // 1% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
    cleanupAntiSpamCache();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!antiSpamCache.has(visitorId)) {
    antiSpamCache.set(visitorId, {
      lastEvent: 0,
      lastPath: '',
      events: [],
      clientId: clientId
    });
  }
  
  const visitorData = antiSpamCache.get(visitorId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–µ —á–∞—â–µ 10 —Å–µ–∫—É–Ω–¥)
  if (now - visitorData.lastEvent < ANTI_SPAM_DELAY) {
    logWithTimestamp(`Anti-spam: too frequent events for visitor ${visitorId} (client ${clientId})`);
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä –ø—É—Ç–∏
  if (visitorData.lastPath === pagePath) {
    logWithTimestamp(`Anti-spam: repeated path ${pagePath} for visitor ${visitorId} (client ${clientId})`);
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
  const recentEvents = visitorData.events.filter(event => now - event.timestamp < ANTI_SPAM_DELAY * 3);
  if (recentEvents.length >= 3) {
    logWithTimestamp(`Anti-spam: too many recent events for visitor ${visitorId} (client ${clientId})`);
    return false;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
  visitorData.lastEvent = now;
  visitorData.lastPath = pagePath;
  visitorData.clientId = clientId; // –û–±–Ω–æ–≤–ª—è–µ–º clientId –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
  visitorData.events.push({
    timestamp: now,
    path: pagePath,
    clientId: clientId
  });
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π
  if (visitorData.events.length > MAX_VISITOR_EVENTS) {
    visitorData.events = visitorData.events.slice(-MAX_VISITOR_EVENTS);
  }
  
  logWithTimestamp(`Anti-spam: event approved for visitor ${visitorId} on path ${pagePath} (client ${clientId})`);
  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
 * @param {number} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} pagePath - –ü—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @returns {boolean} - true –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
export function shouldSendNotification(clientId, pagePath) {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  // –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è shouldProcessEvent —Å visitorId
  const now = Date.now();
  const cacheKey = `client_${clientId}`;
  
  if (!antiSpamCache.has(cacheKey)) {
    antiSpamCache.set(cacheKey, { 
      lastEvent: 0, 
      lastPath: '', 
      events: [],
      clientId: clientId 
    });
  }
  
  const cache = antiSpamCache.get(cacheKey);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–µ —á–∞—â–µ 10 —Å–µ–∫—É–Ω–¥)
  if (now - cache.lastEvent < ANTI_SPAM_DELAY) {
    logWithTimestamp(`Anti-spam: too frequent notifications for client ${clientId}`);
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä –ø—É—Ç–∏
  if (cache.lastPath === pagePath) {
    logWithTimestamp(`Anti-spam: repeated path ${pagePath} for client ${clientId}`);
    return false;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
  cache.lastEvent = now;
  cache.lastPath = pagePath;
  
  return true;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º-–∫—ç—à–∞
 * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 */
export function getAntiSpamCacheStats() {
  const now = Date.now();
  let totalVisitors = 0;
  let activeVisitors = 0;
  let totalEvents = 0;
  let recentEvents = 0;
  const clientDistribution = new Map();
  
  for (const [visitorId, visitorData] of antiSpamCache.entries()) {
    totalVisitors++;
    
    // –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç)
    if (now - visitorData.lastEvent <= VISITOR_CACHE_TTL) {
      activeVisitors++;
    }
    
    // –°—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    if (visitorData.events && Array.isArray(visitorData.events)) {
      totalEvents += visitorData.events.length;
      
      // –°—á–∏—Ç–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
      const recentEventCount = visitorData.events.filter(
        event => now - event.timestamp <= 10 * 60 * 1000
      ).length;
      recentEvents += recentEventCount;
    }
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    const clientId = visitorData.clientId || 'unknown';
    clientDistribution.set(clientId, (clientDistribution.get(clientId) || 0) + 1);
  }
  
  return {
    totalVisitors,
    activeVisitors,
    totalEvents,
    recentEvents,
    clientDistribution: Object.fromEntries(clientDistribution),
    cacheSize: antiSpamCache.size,
    settings: {
      delayMs: ANTI_SPAM_DELAY,
      cacheTtlMs: VISITOR_CACHE_TTL,
      maxEventsPerVisitor: MAX_VISITOR_EVENTS
    }
  };
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-–∫—ç—à–∞
 * @returns {number} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */
export function forceCleanupAntiSpamCache() {
  const beforeSize = antiSpamCache.size;
  cleanupAntiSpamCache();
  const afterSize = antiSpamCache.size;
  const cleanedCount = beforeSize - afterSize;
  
  logWithTimestamp(`Manual anti-spam cache cleanup completed: ${cleanedCount} entries removed`);
  
  return cleanedCount;
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –∏–∑ –∞–Ω—Ç–∏—Å–ø–∞–º-–∫—ç—à–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {boolean} - true –µ—Å–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω
 */
export function removeVisitorFromCache(visitorId) {
  const existed = antiSpamCache.has(visitorId);
  
  if (existed) {
    antiSpamCache.delete(visitorId);
    logWithTimestamp(`Visitor ${visitorId} removed from anti-spam cache`);
    return true;
  }
  
  return false;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ –∏–∑ –∫—ç—à–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {Object|null} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ –∏–ª–∏ null
 */
export function getVisitorCacheInfo(visitorId) {
  const visitorData = antiSpamCache.get(visitorId);
  if (!visitorData) {
    return null;
  }
  
  const now = Date.now();
  const timeSinceLastEvent = now - visitorData.lastEvent;
  const isActive = timeSinceLastEvent <= VISITOR_CACHE_TTL;
  
  return {
    visitorId,
    lastEvent: visitorData.lastEvent,
    lastPath: visitorData.lastPath,
    clientId: visitorData.clientId,
    eventCount: visitorData.events ? visitorData.events.length : 0,
    timeSinceLastEvent,
    isActive,
    recentEvents: visitorData.events ? visitorData.events.filter(
      event => now - event.timestamp <= 10 * 60 * 1000
    ).length : 0
  };
}

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-–∫—ç—à–∞
 * @returns {number} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */
export function clearAntiSpamCache() {
  const beforeSize = antiSpamCache.size;
  antiSpamCache.clear();
  logWithTimestamp(`Anti-spam cache cleared: ${beforeSize} entries removed`);
  return beforeSize;
}