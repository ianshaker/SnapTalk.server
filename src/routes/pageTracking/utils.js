/**
 * üõ†Ô∏è UTILITIES FOR PAGE TRACKING
 * 
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
 * - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∏–∑ URL
 * - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {*} data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export function logWithTimestamp(message, data = null) {
  const timestamp = new Date().toISOString();
  if (data) {
    console.log(`[${timestamp}] üìä ${message}`, data);
  } else {
    console.log(`[${timestamp}] üìä ${message}`);
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ page_path –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
 * @param {string} url - –ü–æ–ª–Ω—ã–π URL
 * @returns {string} - –ü—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export function extractPagePath(url) {
  try {
    const urlObj = new URL(url);
    let path = urlObj.pathname;
    
    // –î–æ–±–∞–≤–ª—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (urlObj.search) {
      path += urlObj.search;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º hash –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (urlObj.hash) {
      path += urlObj.hash;
    }
    
    return path;
  } catch (error) {
    logWithTimestamp(`Error extracting path from URL: ${url}`, error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL –∫–∞–∫ fallback
    return url;
  }
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @param {Object} eventData - –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * @returns {Object} - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã
 */
export function prepareEventData(eventData) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º page_path –∏–∑ URL
  const pagePath = eventData.url ? extractPagePath(eventData.url) : null;
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const utmData = {
    utm_source: null,
    utm_medium: null,
    utm_campaign: null,
    utm_term: null,
    utm_content: null
  };
  
  if (eventData.utm && typeof eventData.utm === 'object') {
    Object.keys(utmData).forEach(key => {
      const utmKey = key.replace('utm_', '');
      if (eventData.utm[utmKey] && typeof eventData.utm[utmKey] === 'string') {
        const value = eventData.utm[utmKey].trim();
        utmData[key] = value.length > 0 ? value : null;
      }
    });
  }
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø visitorId –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (eventData.visitorId && typeof eventData.visitorId !== 'string') {
    console.log('‚ö†Ô∏è WARNING: visitorId is not a string:', typeof eventData.visitorId, eventData.visitorId);
  }
  
  const preparedData = {
    site_id: eventData.clientId, // database.js –æ–∂–∏–¥–∞–µ—Ç site_id, –∞ –Ω–µ client_id
    visitor_id: typeof eventData.visitorId === 'string' ? eventData.visitorId.trim() : eventData.visitorId,
    request_id: eventData.requestId?.trim() || null, // request_id –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç fingerprint —Å–µ—Ä–≤–∏—Å–∞
    page_url: eventData.url?.trim() || null,
    page_path: pagePath,
    page_title: eventData.title?.trim() || null,
    referrer: eventData.referrer?.trim() || null,
    utm_data: utmData, // database.js –æ–∂–∏–¥–∞–µ—Ç utm_data –∫–∞–∫ –æ–±—ä–µ–∫—Ç
    user_agent: eventData.userAgent?.trim() || null,
    ip_address: eventData.ipAddress?.trim() || null,
    event_timestamp: eventData.timestamp || new Date().toISOString(),
    
    // Session tracking –ø–æ–ª—è
    event_type: eventData.eventType || 'page_view',
    session_duration: eventData.sessionDuration || null,
    is_session_active: eventData.isSessionActive !== undefined ? eventData.isSessionActive : true,
    is_session_start: eventData.isSessionStart || false,
    is_session_end: eventData.isSessionEnd || false
  };
  
  return preparedData;
}