/**
 * üì± TELEGRAM NOTIFICATIONS MODULE
 * 
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
 * - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
 */

import { sendToTopic, ensureTopicForVisitor, ensureTopicForVisitorForClient, saveSiteVisit } from '../../services/telegramService.js';
import { formatTelegramMessage, getMessagePrefix, formatTabSwitchMessage, formatSessionEndMessage } from '../../services/messageFormatterService.js';
import { logWithTimestamp } from './utils.js';

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTelegramNotification(client, eventData, visitorId) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!eventData || !visitorId) {
      logWithTimestamp('‚ùå Telegram notification failed: missing event data or visitor ID');
      return {
        success: false,
        error: 'Missing event data or visitor ID'
      };
    }
    
    if (!client) {
      logWithTimestamp('‚ùå Telegram notification failed: missing client data');
      return {
        success: false,
        error: 'Missing client data'
      };
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ session.js –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram (–ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞)
    if (!client.telegram_group_id || !client.telegram_bot_token) {
      logWithTimestamp(`Telegram notification skipped: missing telegram configuration for client ${client.id}`);
      return {
        success: false,
        error: 'Missing Telegram configuration',
        skipped: true
      };
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const metadata = {
      siteId: client.id,
      siteName: client.site_name || client.site_url || 'Unknown Site',
      visitorId: visitorId,
      timestamp: new Date().toISOString(),
      eventData: eventData
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    // –î–ª—è session —Å–æ–±—ã—Ç–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    const isSessionEvent = ['session_start', 'session_end', 'tab_switch'].includes(eventData.event_type);
    const topicInfo = isSessionEvent 
      ? await ensureTopicForVisitorForClient(
          client.id,
          client,
          visitorId,
          eventData.request_id,
          eventData.page_url,
          {
            title: eventData.page_title,
            ref: eventData.referrer,
            utm: eventData.utm_data
          }
        )
      : await ensureTopicForVisitor(
          client.id,
          client,
          visitorId,
          eventData.request_id,
          eventData.page_url,
          {
            title: eventData.page_title,
            ref: eventData.referrer,
            utm: eventData.utm_data
          }
        );
    

    
    const isExistingVisitor = topicInfo && typeof topicInfo === 'object' && topicInfo.isExistingVisitor;
    const lastSessionStatus = topicInfo && typeof topicInfo === 'object' ? topicInfo.lastSessionStatus : null;
    
    // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    logWithTimestamp(`üîç DEBUG visitor ${visitorId.slice(0,8)}:`);
    logWithTimestamp(`üîç   topicInfo:`, JSON.stringify(topicInfo, null, 2));
    logWithTimestamp(`üîç   isExistingVisitor: ${isExistingVisitor}`);
    logWithTimestamp(`üîç   lastSessionStatus: ${lastSessionStatus}`);
    logWithTimestamp(`üîç   event_type: ${eventData.event_type}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å page_view —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    // –ï—Å–ª–∏ —ç—Ç–æ page_view —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ session_start, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (eventData.event_type === 'page_view' && eventData.isSessionStart) {
      logWithTimestamp(`üìä –ü—Ä–æ–ø—É—Å–∫–∞–µ–º page_view —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è visitor ${visitorId.slice(0,8)} - —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ session_start`);
      return {
        success: true,
        skipped: true,
        reason: 'page_view_after_session_start',
        visitorId: visitorId,
        siteId: client.id
      };
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    let message;
    const shortVisitorId = visitorId.slice(0, 8);
    const timeStr = new Date(eventData.event_timestamp).toLocaleString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit'
    });
    
    switch (eventData.event_type) {
      case 'tab_switch':
        message = `üîÑ –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –≤–∫–ª–∞–¥–∫—É\n` +
                 `${shortVisitorId} ‚Ä¢ ${timeStr}\n` +
                 `${eventData.page_title || eventData.page_url}`;
        break;
      case 'session_end':
        const duration = eventData.session_duration ? 
          `${Math.round(eventData.session_duration / 1000)}—Å` : '?';
        message = `üîö –ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é\n` +
                 `${shortVisitorId} ‚Ä¢ ${timeStr} ‚Ä¢ ‚è±Ô∏è${duration}\n` +
                 `${eventData.page_title || eventData.page_url}`;
        break;
      case 'page_view':
      case 'session_start':
      default:
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ isExistingVisitor –∏ last_session_status
        let visitorType;
        if (!isExistingVisitor) {
          visitorType = 'üëã –ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å';
        } else if (lastSessionStatus === 'closed') {
          visitorType = 'üîÑ –í–û–ó–í–†–ê–¢ –ü–û–°–õ–ï –ó–ê–ö–†–´–¢–ò–Ø –°–ê–ô–¢–ê';
        } else if (lastSessionStatus === 'timeout') {
          visitorType = '‚è∞ –í–û–ó–í–†–ê–¢ –ü–û–°–õ–ï –¢–ê–ô–ú–ê–£–¢–ê';
        } else {
          visitorType = 'üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏';
        }
        
        message = `${visitorType}\n` +
                 `${shortVisitorId} ‚Ä¢ ${timeStr}\n` +
                 `${eventData.page_title || eventData.page_url}\n` +
                 `üîó ${eventData.referrer || '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥'}`;
        

        break;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ telegramService
    const telegramResult = await sendToTopic({
      clientId: client.id,
      text: message,
      prefix: '',
      client: client,
      visitorId: visitorId,
      requestId: eventData.request_id,
      url: eventData.page_url,
      meta: {
        title: eventData.page_title,
        ref: eventData.referrer,
        utm: eventData.utm_data
      }
    });
    
    // sendToTopic –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Telegram API –Ω–∞–ø—Ä—è–º—É—é
    if (telegramResult && telegramResult.message_id) {
      return {
        success: true,
        messageId: telegramResult.message_id,
        visitorId: visitorId,
        siteId: client.id
      };
    } else {
      logWithTimestamp(`‚ùå Telegram notification failed for visitor ${visitorId}: unexpected result format`);
      return {
        success: false,
        error: 'Unexpected result format from sendToTopic',
        visitorId: visitorId,
        siteId: client.id
      };
    }
    
  } catch (error) {
    logWithTimestamp(`‚ùå Error sending Telegram notification: ${error.message}`);
    return {
      success: false,
      error: error.message,
      visitorId: visitorId,
      siteId: client?.id
    };
  }
}



/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
 * @param {string} testUrl - URL –¥–ª—è —Ç–µ—Å—Ç–∞
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTestTelegramNotification(client, visitorId, testUrl) {
  try {
    logWithTimestamp(`Sending test Telegram notification for client ${client.id}`);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    const testEventData = {
      page_url: testUrl,
      page_path: new URL(testUrl).pathname,
      page_title: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Page Tracking API',
      referrer: 'https://test-referrer.com',
      user_agent: 'Mozilla/5.0 (Test Browser) PageTrackingAPI/1.0',
      ip_address: '192.168.1.100',
      utm_data: {
        utm_source: 'test',
        utm_medium: 'api',
        utm_campaign: 'page_tracking_test',
        utm_term: 'test_notification',
        utm_content: 'api_test'
      }
    };
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const result = await sendTelegramNotification(client, testEventData, visitorId);
    
    if (result.success) {
      logWithTimestamp(`Test Telegram notification sent successfully for client ${client.id}`);
      return {
        success: true,
        message: 'Test notification sent successfully',
        messageId: result.messageId,
        topicId: result.topicId,
        testData: {
          visitorId,
          testUrl,
          siteId: client.id,
          siteName: client.site_name || client.site_url
        }
      };
    } else {
      logWithTimestamp(`Test Telegram notification failed for client ${client.id}: ${result.error}`);
      return {
        success: false,
        error: result.error,
        testData: {
          visitorId,
          testUrl,
          siteId: client.id
        }
      };
    }
    
  } catch (error) {
    logWithTimestamp(`Error sending test Telegram notification: ${error.message}`);
    return {
      success: false,
      error: error.message,
      testData: {
        visitorId,
        testUrl,
        siteId: client?.id
      }
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export function validateTelegramConfig(client) {
  const errors = [];
  const warnings = [];
  
  if (!client) {
    errors.push('Client data is missing');
    return { valid: false, errors, warnings };
  }
  
  if (!client.telegram_bot_token) {
    errors.push('Telegram bot token is missing');
  } else if (typeof client.telegram_bot_token !== 'string' || !client.telegram_bot_token.includes(':')) {
    errors.push('Telegram bot token format is invalid');
  }
  
  if (!client.telegram_group_id) {
    errors.push('Telegram group ID is missing');
  } else if (typeof client.telegram_group_id !== 'string' && typeof client.telegram_group_id !== 'number') {
    errors.push('Telegram group ID format is invalid');
  }
  
  if (client.telegram_topic_mapping && typeof client.telegram_topic_mapping !== 'object') {
    warnings.push('Telegram topic mapping should be an object');
  }
  
  const valid = errors.length === 0;
  
  return {
    valid,
    errors,
    warnings,
    hasTopicSupport: !!client.telegram_topic_mapping
  };
}