/**
 * üì± TELEGRAM NOTIFICATIONS MODULE
 * 
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
 * - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
 */

import { sendToTopic, ensureTopicForVisitor, saveSiteVisit } from '../../services/telegramService.js';
import { formatTelegramMessage, getMessagePrefix, formatTabSwitchMessage, formatSessionEndMessage } from '../../services/messageFormatterService.js';
import { logWithTimestamp } from './utils.js';

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTelegramNotification(client, eventData, visitorId) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!client || !client.telegram_group_id || !client.telegram_bot_token) {
      logWithTimestamp(`Telegram notification skipped: missing telegram configuration for client ${client?.id}`);
      return {
        success: false,
        error: 'Missing Telegram configuration',
        skipped: true
      };
    }
    
    if (!eventData || !visitorId) {
      logWithTimestamp('Telegram notification failed: missing event data or visitor ID');
      return {
        success: false,
        error: 'Missing event data or visitor ID'
      };
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const metadata = {
      siteId: client.id,
      siteName: client.site_name || client.site_url || 'Unknown Site',
      visitorId: visitorId,
      timestamp: new Date().toISOString(),
      eventData: eventData
    };
    
    logWithTimestamp(`Preparing Telegram notification for visitor ${visitorId} on site ${metadata.siteName}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const topicInfo = await ensureTopicForVisitor(
      client.id,
      client,
      visitorId,
      eventData.request_id,
      eventData.page_url,
      {
        title: eventData.page_title,
        ref: eventData.referrer,
        utm: eventData.utm_data
      }
    );
    
    const isExistingVisitor = topicInfo && typeof topicInfo === 'object' && topicInfo.isExistingVisitor;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    let message;
    const eventType = eventData.event_type;
    
    if (eventType === 'tab_switch') {
      message = formatTabSwitchMessage({
        eventData,
        visitorId,
        sessionDuration: eventData.session_duration
      });
    } else if (eventType === 'session_end') {
      message = formatSessionEndMessage({
        eventData,
        visitorId,
        sessionDuration: eventData.session_duration
      });
    } else {
      // –î–ª—è session_start –∏ page_view –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      const messageResult = formatTelegramMessage({
        eventData,
        visitorId,
        isExistingVisitor,
        isPageTransition: isExistingVisitor
      });
      message = messageResult.fullMessage;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É site_visitors
    try {
      await saveSiteVisit(
        client.id,
        visitorId,
        eventData.request_id,
        eventData.page_url,
        {
          title: eventData.page_title,
          ref: eventData.referrer,
          utm: eventData.utm_data
        },
        eventData.user_agent,
        eventData.ip_address
      );
    } catch (siteVisitError) {
      logWithTimestamp(`Warning: Failed to save site visit: ${siteVisitError.message}`);
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ telegramService
    const telegramResult = await sendToTopic({
      clientId: client.id,
      text: message,
      prefix: '',
      client: client,
      visitorId: visitorId,
      requestId: eventData.request_id,
      url: eventData.page_url,
      meta: {
        title: eventData.page_title,
        ref: eventData.referrer,
        utm: eventData.utm_data
      }
    });
    
    // sendToTopic –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Telegram API –Ω–∞–ø—Ä—è–º—É—é
    if (telegramResult && telegramResult.message_id) {
      logWithTimestamp(`Telegram notification sent successfully for visitor ${visitorId}`);
      return {
        success: true,
        messageId: telegramResult.message_id,
        visitorId: visitorId,
        siteId: client.id
      };
    } else {
      logWithTimestamp(`Telegram notification failed for visitor ${visitorId}: unexpected result format`);
      return {
        success: false,
        error: 'Unexpected result format from sendToTopic',
        visitorId: visitorId,
        siteId: client.id
      };
    }
    
  } catch (error) {
    logWithTimestamp(`Error sending Telegram notification: ${error.message}`);
    return {
      success: false,
      error: error.message,
      visitorId: visitorId,
      siteId: client?.id
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å)
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * @param {boolean} hasExistingTopic - –ï—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ formatTelegramMessage –∏–∑ messageFormatterService
 */
function formatTelegramMessageLegacy(metadata, hasExistingTopic = false) {
  const {
    siteName,
    visitorId,
    timestamp,
    eventData
  } = metadata;
  
  const result = formatTelegramMessage({
    eventData,
    visitorId,
    isExistingVisitor: hasExistingTopic,
    isPageTransition: hasExistingTopic
  });
  
  return result.fullMessage;
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏–∑ User-Agent
 * @param {string} userAgent - User-Agent —Å—Ç—Ä–æ–∫–∞
 * @returns {string|null} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
 */
function parseBrowserInfo(userAgent) {
  if (!userAgent || typeof userAgent !== 'string') {
    return null;
  }
  
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    if (userAgent.includes('Chrome/') && !userAgent.includes('Edg/')) {
      const chromeMatch = userAgent.match(/Chrome\/(\d+\.\d+)/);
      return chromeMatch ? `Chrome ${chromeMatch[1]}` : 'Chrome';
    }
    
    if (userAgent.includes('Firefox/')) {
      const firefoxMatch = userAgent.match(/Firefox\/(\d+\.\d+)/);
      return firefoxMatch ? `Firefox ${firefoxMatch[1]}` : 'Firefox';
    }
    
    if (userAgent.includes('Safari/') && !userAgent.includes('Chrome/')) {
      const safariMatch = userAgent.match(/Version\/(\d+\.\d+).*Safari/);
      return safariMatch ? `Safari ${safariMatch[1]}` : 'Safari';
    }
    
    if (userAgent.includes('Edg/')) {
      const edgeMatch = userAgent.match(/Edg\/(\d+\.\d+)/);
      return edgeMatch ? `Edge ${edgeMatch[1]}` : 'Edge';
    }
    
    if (userAgent.includes('Opera/') || userAgent.includes('OPR/')) {
      const operaMatch = userAgent.match(/(?:Opera\/|OPR\/)([\d\.]+)/);
      return operaMatch ? `Opera ${operaMatch[1]}` : 'Opera';
    }
    
    // –ú–æ–±–∏–ª—å–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
    if (userAgent.includes('Mobile') || userAgent.includes('Android')) {
      if (userAgent.includes('Chrome/')) {
        return 'Chrome Mobile';
      }
      if (userAgent.includes('Safari/')) {
        return 'Safari Mobile';
      }
      return 'Mobile Browser';
    }
    
    return null;
    
  } catch (error) {
    logWithTimestamp(`Error parsing browser info: ${error.message}`);
    return null;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
 * @param {string} testUrl - URL –¥–ª—è —Ç–µ—Å—Ç–∞
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTestTelegramNotification(client, visitorId, testUrl) {
  try {
    logWithTimestamp(`Sending test Telegram notification for client ${client.id}`);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    const testEventData = {
      page_url: testUrl,
      page_path: new URL(testUrl).pathname,
      page_title: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Page Tracking API',
      referrer: 'https://test-referrer.com',
      user_agent: 'Mozilla/5.0 (Test Browser) PageTrackingAPI/1.0',
      ip_address: '192.168.1.100',
      utm_data: {
        utm_source: 'test',
        utm_medium: 'api',
        utm_campaign: 'page_tracking_test',
        utm_term: 'test_notification',
        utm_content: 'api_test'
      }
    };
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const result = await sendTelegramNotification(client, testEventData, visitorId);
    
    if (result.success) {
      logWithTimestamp(`Test Telegram notification sent successfully for client ${client.id}`);
      return {
        success: true,
        message: 'Test notification sent successfully',
        messageId: result.messageId,
        topicId: result.topicId,
        testData: {
          visitorId,
          testUrl,
          siteId: client.id,
          siteName: client.site_name || client.site_url
        }
      };
    } else {
      logWithTimestamp(`Test Telegram notification failed for client ${client.id}: ${result.error}`);
      return {
        success: false,
        error: result.error,
        testData: {
          visitorId,
          testUrl,
          siteId: client.id
        }
      };
    }
    
  } catch (error) {
    logWithTimestamp(`Error sending test Telegram notification: ${error.message}`);
    return {
      success: false,
      error: error.message,
      testData: {
        visitorId,
        testUrl,
        siteId: client?.id
      }
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export function validateTelegramConfig(client) {
  const errors = [];
  const warnings = [];
  
  if (!client) {
    errors.push('Client data is missing');
    return { valid: false, errors, warnings };
  }
  
  if (!client.telegram_bot_token) {
    errors.push('Telegram bot token is missing');
  } else if (typeof client.telegram_bot_token !== 'string' || !client.telegram_bot_token.includes(':')) {
    errors.push('Telegram bot token format is invalid');
  }
  
  if (!client.telegram_group_id) {
    errors.push('Telegram group ID is missing');
  } else if (typeof client.telegram_group_id !== 'string' && typeof client.telegram_group_id !== 'number') {
    errors.push('Telegram group ID format is invalid');
  }
  
  if (client.telegram_topic_mapping && typeof client.telegram_topic_mapping !== 'object') {
    warnings.push('Telegram topic mapping should be an object');
  }
  
  const valid = errors.length === 0;
  
  return {
    valid,
    errors,
    warnings,
    hasTopicSupport: !!client.telegram_topic_mapping
  };
}