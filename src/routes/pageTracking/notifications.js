/**
 * üì± TELEGRAM NOTIFICATIONS MODULE
 * 
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
 * - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
 */

import { sendToTopic, ensureTopicForVisitor } from '../../services/telegramService.js';
import { logWithTimestamp } from './utils.js';

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTelegramNotification(client, eventData, visitorId) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!client || !client.telegram_group_id || !client.telegram_bot_token) {
      logWithTimestamp(`Telegram notification skipped: missing telegram configuration for client ${client?.id}`);
      return {
        success: false,
        error: 'Missing Telegram configuration',
        skipped: true
      };
    }
    
    if (!eventData || !visitorId) {
      logWithTimestamp('Telegram notification failed: missing event data or visitor ID');
      return {
        success: false,
        error: 'Missing event data or visitor ID'
      };
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const metadata = {
      siteId: client.id,
      siteName: client.site_name || client.site_url || 'Unknown Site',
      visitorId: visitorId,
      timestamp: new Date().toISOString(),
      eventData: eventData
    };
    
    logWithTimestamp(`Preparing Telegram notification for visitor ${visitorId} on site ${metadata.siteName}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const topicInfo = await ensureTopicForVisitor(
      client.id,
      client,
      visitorId,
      eventData.request_id,
      eventData.page_url,
      {
        title: eventData.page_title,
        ref: eventData.referrer,
        utm: eventData.utm_data
      }
    );
    
    const isExistingVisitor = topicInfo && typeof topicInfo === 'object' && topicInfo.isExistingVisitor;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
    const message = formatTelegramMessage(metadata, isExistingVisitor);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ telegramService
    const telegramResult = await sendToTopic({
      clientId: client.id,
      text: message,
      prefix: 'üîî ',
      client: client,
      visitorId: visitorId,
      requestId: eventData.request_id,
      url: eventData.page_url,
      meta: {
        title: eventData.page_title,
        ref: eventData.referrer,
        utm: eventData.utm_data
      }
    });
    
    // sendToTopic –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Telegram API –Ω–∞–ø—Ä—è–º—É—é
    if (telegramResult && telegramResult.message_id) {
      logWithTimestamp(`Telegram notification sent successfully for visitor ${visitorId}`);
      return {
        success: true,
        messageId: telegramResult.message_id,
        visitorId: visitorId,
        siteId: client.id
      };
    } else {
      logWithTimestamp(`Telegram notification failed for visitor ${visitorId}: unexpected result format`);
      return {
        success: false,
        error: 'Unexpected result format from sendToTopic',
        visitorId: visitorId,
        siteId: client.id
      };
    }
    
  } catch (error) {
    logWithTimestamp(`Error sending Telegram notification: ${error.message}`);
    return {
      success: false,
      error: error.message,
      visitorId: visitorId,
      siteId: client?.id
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * @param {boolean} hasExistingTopic - –ï—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø–∏–∫ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function formatTelegramMessage(metadata, hasExistingTopic = false) {
  const {
    siteName,
    visitorId,
    timestamp,
    eventData
  } = metadata;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const timeFormatted = new Date(timestamp).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
  
  // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  let message = '';
  
  if (hasExistingTopic) {
    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è (–±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ–µ)
    message += `üîÑ **–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å–∞–π—Ç—É**\n\n`;
  } else {
    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è (–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ)
    message += `üÜï **–ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ**\n\n`;
    message += `üë§ **–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å:** \`${visitorId}\`\n`;
  }
  
  message += `üåê **–°–∞–π—Ç:** ${siteName}\n`;
  message += `üìÑ **–°—Ç—Ä–∞–Ω–∏—Ü–∞:** ${eventData.page_path || '/'}\n`;
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (eventData.page_title && eventData.page_title.trim()) {
    message += `üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${eventData.page_title}\n`;
  }
  
  // URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (eventData.page_url) {
    message += `üîó **URL:** ${eventData.page_url}\n`;
  }
  
  // –†–µ—Ñ–µ—Ä–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (eventData.referrer && eventData.referrer.trim() && eventData.referrer !== eventData.page_url) {
    try {
      const referrerUrl = new URL(eventData.referrer);
      const referrerDomain = referrerUrl.hostname;
      message += `üì• **–û—Ç–∫—É–¥–∞:** ${referrerDomain}\n`;
    } catch {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      message += `üì• **–û—Ç–∫—É–¥–∞:** ${eventData.referrer}\n`;
    }
  }
  
  // UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (eventData.utm_data && Object.keys(eventData.utm_data).length > 0) {
    message += `\nüìä **UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n`;
    
    if (eventData.utm_data.utm_source) {
      message += `‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: ${eventData.utm_data.utm_source}\n`;
    }
    if (eventData.utm_data.utm_medium) {
      message += `‚Ä¢ –ö–∞–Ω–∞–ª: ${eventData.utm_data.utm_medium}\n`;
    }
    if (eventData.utm_data.utm_campaign) {
      message += `‚Ä¢ –ö–∞–º–ø–∞–Ω–∏—è: ${eventData.utm_data.utm_campaign}\n`;
    }
    if (eventData.utm_data.utm_term) {
      message += `‚Ä¢ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ${eventData.utm_data.utm_term}\n`;
    }
    if (eventData.utm_data.utm_content) {
      message += `‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: ${eventData.utm_data.utm_content}\n`;
    }
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (eventData.user_agent) {
    const browserInfo = parseBrowserInfo(eventData.user_agent);
    if (browserInfo) {
      message += `\nüñ•Ô∏è **–ë—Ä–∞—É–∑–µ—Ä:** ${browserInfo}\n`;
    }
  }
  
  // IP –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (eventData.ip_address && eventData.ip_address !== '127.0.0.1' && eventData.ip_address !== '::1') {
    message += `üåç **IP:** \`${eventData.ip_address}\`\n`;
  }
  
  // –í—Ä–µ–º—è
  message += `\n‚è∞ **–í—Ä–µ–º—è:** ${timeFormatted}`;
  
  return message;
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏–∑ User-Agent
 * @param {string} userAgent - User-Agent —Å—Ç—Ä–æ–∫–∞
 * @returns {string|null} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ
 */
function parseBrowserInfo(userAgent) {
  if (!userAgent || typeof userAgent !== 'string') {
    return null;
  }
  
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    if (userAgent.includes('Chrome/') && !userAgent.includes('Edg/')) {
      const chromeMatch = userAgent.match(/Chrome\/(\d+\.\d+)/);
      return chromeMatch ? `Chrome ${chromeMatch[1]}` : 'Chrome';
    }
    
    if (userAgent.includes('Firefox/')) {
      const firefoxMatch = userAgent.match(/Firefox\/(\d+\.\d+)/);
      return firefoxMatch ? `Firefox ${firefoxMatch[1]}` : 'Firefox';
    }
    
    if (userAgent.includes('Safari/') && !userAgent.includes('Chrome/')) {
      const safariMatch = userAgent.match(/Version\/(\d+\.\d+).*Safari/);
      return safariMatch ? `Safari ${safariMatch[1]}` : 'Safari';
    }
    
    if (userAgent.includes('Edg/')) {
      const edgeMatch = userAgent.match(/Edg\/(\d+\.\d+)/);
      return edgeMatch ? `Edge ${edgeMatch[1]}` : 'Edge';
    }
    
    if (userAgent.includes('Opera/') || userAgent.includes('OPR/')) {
      const operaMatch = userAgent.match(/(?:Opera\/|OPR\/)([\d\.]+)/);
      return operaMatch ? `Opera ${operaMatch[1]}` : 'Opera';
    }
    
    // –ú–æ–±–∏–ª—å–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
    if (userAgent.includes('Mobile') || userAgent.includes('Android')) {
      if (userAgent.includes('Chrome/')) {
        return 'Chrome Mobile';
      }
      if (userAgent.includes('Safari/')) {
        return 'Safari Mobile';
      }
      return 'Mobile Browser';
    }
    
    return null;
    
  } catch (error) {
    logWithTimestamp(`Error parsing browser info: ${error.message}`);
    return null;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
 * @param {string} testUrl - URL –¥–ª—è —Ç–µ—Å—Ç–∞
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export async function sendTestTelegramNotification(client, visitorId, testUrl) {
  try {
    logWithTimestamp(`Sending test Telegram notification for client ${client.id}`);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    const testEventData = {
      page_url: testUrl,
      page_path: new URL(testUrl).pathname,
      page_title: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Page Tracking API',
      referrer: 'https://test-referrer.com',
      user_agent: 'Mozilla/5.0 (Test Browser) PageTrackingAPI/1.0',
      ip_address: '192.168.1.100',
      utm_data: {
        utm_source: 'test',
        utm_medium: 'api',
        utm_campaign: 'page_tracking_test',
        utm_term: 'test_notification',
        utm_content: 'api_test'
      }
    };
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const result = await sendTelegramNotification(client, testEventData, visitorId);
    
    if (result.success) {
      logWithTimestamp(`Test Telegram notification sent successfully for client ${client.id}`);
      return {
        success: true,
        message: 'Test notification sent successfully',
        messageId: result.messageId,
        topicId: result.topicId,
        testData: {
          visitorId,
          testUrl,
          siteId: client.id,
          siteName: client.site_name || client.site_url
        }
      };
    } else {
      logWithTimestamp(`Test Telegram notification failed for client ${client.id}: ${result.error}`);
      return {
        success: false,
        error: result.error,
        testData: {
          visitorId,
          testUrl,
          siteId: client.id
        }
      };
    }
    
  } catch (error) {
    logWithTimestamp(`Error sending test Telegram notification: ${error.message}`);
    return {
      success: false,
      error: error.message,
      testData: {
        visitorId,
        testUrl,
        siteId: client?.id
      }
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export function validateTelegramConfig(client) {
  const errors = [];
  const warnings = [];
  
  if (!client) {
    errors.push('Client data is missing');
    return { valid: false, errors, warnings };
  }
  
  if (!client.telegram_bot_token) {
    errors.push('Telegram bot token is missing');
  } else if (typeof client.telegram_bot_token !== 'string' || !client.telegram_bot_token.includes(':')) {
    errors.push('Telegram bot token format is invalid');
  }
  
  if (!client.telegram_group_id) {
    errors.push('Telegram group ID is missing');
  } else if (typeof client.telegram_group_id !== 'string' && typeof client.telegram_group_id !== 'number') {
    errors.push('Telegram group ID format is invalid');
  }
  
  if (client.telegram_topic_mapping && typeof client.telegram_topic_mapping !== 'object') {
    warnings.push('Telegram topic mapping should be an object');
  }
  
  const valid = errors.length === 0;
  
  return {
    valid,
    errors,
    warnings,
    hasTopicSupport: !!client.telegram_topic_mapping
  };
}