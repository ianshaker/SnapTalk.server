import { validateSessionTrackingData } from './validation.js';
import { findClientBySiteKey } from './clientCache.js';
import { savePageEvent } from './database.js';
import { prepareEventData, logWithTimestamp } from './utils.js';
import { sendTelegramNotification } from './notifications.js';

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ session tracking —Å–æ–±—ã—Ç–∏–π
 * POST /api/track/session
 */
export async function trackSession(req, res) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationResult = validateSessionTrackingData(req.body);
    if (!validationResult.isValid) {
      logWithTimestamp(`‚ùå Session validation failed: ${validationResult.errors.join(', ')}`);
      return res.status(400).json({ 
        error: 'Validation failed', 
        details: validationResult.errors 
      });
    }

    const { siteKey, visitorId, eventType, requestId } = req.body;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ site key
    const client = await findClientBySiteKey(siteKey);
    if (!client) {
      logWithTimestamp(`‚ùå Client not found for site key: ${siteKey}`);
      return res.status(404).json({ error: 'Client not found' });
    }

    logWithTimestamp(`Processing session event '${eventType}' for client ${client.id} (${client.site_name || client.site_url})`);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ session tracking –ø–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    let sessionData = {
      isSessionActive: true,
      isSessionStart: false,
      isSessionEnd: false,
      sessionDuration: null
    };

    switch (eventType) {
      case 'session_start':
        sessionData.isSessionStart = true;
        sessionData.isSessionActive = true;
        break;
      
      case 'session_end':
        sessionData.isSessionEnd = true;
        sessionData.isSessionActive = false;
        sessionData.sessionDuration = req.body.sessionDuration || null;
        break;
      
      case 'tab_switch':
        sessionData.isSessionActive = true;
        break;
      
      default:
        logWithTimestamp(`‚ùå Unknown event type: ${eventType}`);
        return res.status(400).json({ error: 'Unknown event type' });
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    const eventData = prepareEventData({
      clientId: client.id,
      visitorId: visitorId,
      requestId: requestId,
      url: req.body.url || null,
      title: req.body.title || null,
      referrer: req.body.referrer || null,
      utm: req.body.utm || null,
      userAgent: req.body.userAgent || req.headers['user-agent'],
      ipAddress: req.ip,
      timestamp: new Date().toISOString(),
      // Session tracking –ø–æ–ª—è
      eventType: eventType,
      sessionDuration: sessionData.sessionDuration,
      isSessionActive: sessionData.isSessionActive,
      isSessionStart: sessionData.isSessionStart,
      isSessionEnd: sessionData.isSessionEnd
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const savedEvent = await savePageEvent(eventData);
    logWithTimestamp(`‚úÖ Session event '${eventType}' saved with ID: ${savedEvent.id}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è session —Å–æ–±—ã—Ç–∏–π
    if (client.telegram_enabled && ['session_start', 'session_end', 'tab_switch'].includes(eventType)) {
      try {
        await sendTelegramNotification(client, eventData, savedEvent);
        logWithTimestamp(`üì± Telegram notification sent for ${eventType}`);
      } catch (telegramError) {
        logWithTimestamp(`‚ùå Telegram notification failed: ${telegramError.message}`);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
      }
    }

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      eventId: savedEvent.id,
      eventType: eventType,
      timestamp: eventData.event_timestamp
    });

  } catch (error) {
    logWithTimestamp(`‚ùå Session tracking error: ${error.message}`);
    console.error('Session tracking error:', error);
    
    res.status(500).json({
      error: 'Internal server error',
      message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
    });
  }
}