import { validateSessionTrackingData } from './validation.js';
import { findClientBySiteKey } from './clientCache.js';
import { savePageEvent } from './database.js';
import { prepareEventData, logWithTimestamp } from './utils.js';
import { sendTelegramNotification } from './notifications.js';
import { saveSiteVisit, updateSiteVisitOnSessionEnd } from '../../services/telegramService.js';
import { sb } from '../../config/env.js';
import visitorCache from '../../utils/cache/VisitorCache.js'; // üî• NEW

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ session tracking —Å–æ–±—ã—Ç–∏–π
 * POST /api/track/session
 */
export async function trackSession(req, res) {
  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ sendBeacon –¥–∞–Ω–Ω—ã—Ö (–º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç)
    let requestBody = req.body;
    if (typeof req.body === 'string') {
      try {
        requestBody = JSON.parse(req.body);
      } catch (error) {
        logWithTimestamp(`‚ùå Failed to parse JSON from sendBeacon: ${error.message}`);
        return res.status(400).json({ error: 'Invalid JSON format' });
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationResult = validateSessionTrackingData(requestBody);
    if (!validationResult.isValid) {
      logWithTimestamp(`‚ùå Session validation failed: ${validationResult.errors.join(', ')}`);
      return res.status(400).json({ 
        error: 'Validation failed', 
        details: validationResult.errors 
      });
    }

    const { siteKey, visitorId, eventType, requestId } = requestBody;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ site key
    const client = await findClientBySiteKey(siteKey);
    if (!client) {
      logWithTimestamp(`‚ùå Client not found for site key: ${siteKey}`);
      return res.status(404).json({ error: 'Client not found' });
    }

    logWithTimestamp(`Processing session event '${eventType}' for client ${client.id} (${client.site_name || client.site_url})`);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ session tracking –ø–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    let sessionData = {
      isSessionActive: true,
      isSessionStart: false,
      isSessionEnd: false,
      sessionDuration: null
    };

    switch (eventType) {
      case 'session_start':
        sessionData.isSessionStart = true;
        sessionData.isSessionActive = true;
        break;
      
      case 'session_end':
        sessionData.isSessionEnd = true;
        sessionData.isSessionActive = false;
        sessionData.sessionDuration = requestBody.sessionDuration || null;
        break;
      
      case 'tab_switch':
        sessionData.isSessionActive = true;
        break;
      
      default:
        logWithTimestamp(`‚ùå Unknown event type: ${eventType}`);
        return res.status(400).json({ error: 'Unknown event type' });
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    const eventData = prepareEventData({
      clientId: client.id,
      visitorId: visitorId,
      requestId: requestId,
      url: requestBody.url || null,
      title: requestBody.title || null,
      referrer: requestBody.referrer || null,
      utm: requestBody.utm || null,
      userAgent: requestBody.userAgent || req.headers['user-agent'],
      ipAddress: req.ip,
      timestamp: new Date().toISOString(),
      // Session tracking –ø–æ–ª—è
      eventType: eventType,
      sessionDuration: sessionData.sessionDuration,
      isSessionActive: sessionData.isSessionActive,
      isSessionStart: sessionData.isSessionStart,
      isSessionEnd: sessionData.isSessionEnd
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const savedEvent = await savePageEvent(eventData);
    logWithTimestamp(`‚úÖ Session event '${eventType}' saved with ID: ${savedEvent.id}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º site_visits –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    if (eventType === 'session_start') {
      logWithTimestamp(`üìä About to call saveSiteVisit for session_start, visitor ${visitorId}`);
      try {
        await saveSiteVisit(
          client.id,
          visitorId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π visitorId –∏–∑ requestBody
          eventData.request_id,
          eventData.page_url,
          {
            title: eventData.page_title,
            ref: eventData.referrer,
            utm: eventData.utm_data
          },
          eventData.user_agent,
          eventData.ip_address
        );
        logWithTimestamp(`üìä saveSiteVisit completed successfully for session_start, visitor ${visitorId}`);
      } catch (siteVisitError) {
        logWithTimestamp(`‚ùå Failed to save site visit for session_start: ${siteVisitError.message}`);
        logWithTimestamp(`‚ùå saveSiteVisit error details:`, siteVisitError);
      }
    } else if (eventType === 'session_end') {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
      logWithTimestamp(`üìä About to call updateSiteVisitOnSessionEnd for session_end, visitor ${visitorId}`);
      try {
        await updateSiteVisitOnSessionEnd(visitorId, sessionData.sessionDuration);
        logWithTimestamp(`üìä updateSiteVisitOnSessionEnd completed successfully for session_end, visitor ${visitorId}`);
      } catch (updateVisitError) {
        logWithTimestamp(`‚ùå Failed to update site visit for session_end: ${updateVisitError.message}`);
        logWithTimestamp(`‚ùå updateSiteVisitOnSessionEnd error details:`, updateVisitError);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è session —Å–æ–±—ã—Ç–∏–π (–ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞!)
    if (client.telegram_bot_token && client.telegram_group_id && ['session_start', 'session_end', 'tab_switch'].includes(eventType)) {
      try {
        // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º sendTelegramNotification
        logWithTimestamp(`üîç About to call sendTelegramNotification with:`);
        logWithTimestamp(`üîç - visitorId type: ${typeof visitorId}`);
        logWithTimestamp(`üîç - visitorId value:`, visitorId);
        logWithTimestamp(`üîç - eventData.visitor_id:`, eventData.visitor_id);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é eventData —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º visitorId –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const telegramEventData = { ...eventData, visitor_id: visitorId };
        logWithTimestamp(`üîç - telegramEventData.visitor_id:`, telegramEventData.visitor_id);
        await sendTelegramNotification(client, telegramEventData, visitorId);
        logWithTimestamp(`üì± Telegram notification sent for ${eventType}`);
      } catch (telegramError) {
        logWithTimestamp(`‚ùå Telegram notification failed: ${telegramError.message}`);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
      }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_session_status –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ (–ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!)
    if ((eventType === 'session_start' || eventType === 'session_end') && visitorId) {
      try {
        let lastSessionStatus;
        
        if (eventType === 'session_start') {
          lastSessionStatus = 'active';
        } else if (eventType === 'session_end') {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
          const sessionEndReason = requestBody.reason || 'closed';
          lastSessionStatus = sessionEndReason === 'inactivity' ? 'timeout' : 'closed';
        }
        
        const { error } = await sb
          .from('client_topics')
          .update({ 
            last_session_status: lastSessionStatus,
            updated_at: new Date().toISOString()
          })
          .eq('visitor_id', visitorId);
        
        if (error) {
          logWithTimestamp(`‚ùå Failed to update last_session_status: ${error.message}`);
        } else {
          logWithTimestamp(`‚úÖ Updated last_session_status to '${lastSessionStatus}' for visitor ${visitorId}`);
          // üî• NEW: Update cache
          visitorCache.updateLastSessionStatus(visitorId, lastSessionStatus);
        }
      } catch (updateError) {
        logWithTimestamp(`‚ùå Error updating last_session_status: ${updateError.message}`);
      }
    }

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      success: true,
      eventId: savedEvent.id,
      eventType: eventType,
      timestamp: eventData.event_timestamp
    });

  } catch (error) {
    logWithTimestamp(`‚ùå Session tracking error: ${error.message}`);
    console.error('Session tracking error:', error);
    
    res.status(500).json({
      error: 'Internal server error',
      message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
    });
  }
}