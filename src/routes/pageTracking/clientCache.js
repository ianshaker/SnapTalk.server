/**
 * üóÑÔ∏è CLIENT CACHE MODULE
 * 
 * –ú–æ–¥—É–ª—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü:
 * - –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
 * - –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ siteKey (api_key)
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TTL –∫—ç—à–∞
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
 */

import { sb } from '../../config/env.js';
import { apiKeys } from '../snapTalkClients.js';
import { logWithTimestamp } from './utils.js';

// –ö—ç—à –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞)
const clientCache = new Map();
const CLIENT_CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

/**
 * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
function cleanupClientCache() {
  const now = Date.now();
  for (const [key, value] of clientCache.entries()) {
    if (now - value.timestamp > CLIENT_CACHE_TTL) {
      clientCache.delete(key);
      logWithTimestamp(`Removed expired client from cache: ${key}`);
    }
  }
}

/**
 * –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ siteKey (api_key) —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param {string} siteKey - API –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ null
 */
export async function findClientBySiteKey(siteKey) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if (!siteKey || typeof siteKey !== 'string' || siteKey.trim().length === 0) {
      logWithTimestamp('Invalid siteKey provided');
      return null;
    }

    const trimmedSiteKey = siteKey.trim();
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à apiKeys (–æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à)
    if (apiKeys.has(trimmedSiteKey)) {
      const cachedClient = apiKeys.get(trimmedSiteKey);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
      if (cachedClient && cachedClient.id) {
        logWithTimestamp(`Client found in apiKeys cache: ${cachedClient.id}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        clientCache.set(trimmedSiteKey, {
          client: cachedClient,
          timestamp: Date.now()
        });
        
        return cachedClient;
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à —Å TTL
    const cachedEntry = clientCache.get(trimmedSiteKey);
    if (cachedEntry && (Date.now() - cachedEntry.timestamp) < CLIENT_CACHE_TTL) {
      logWithTimestamp(`Client found in local cache: ${cachedEntry.client.id}`);
      return cachedEntry.client;
    }

    // 3. –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
    cleanupClientCache();

    // 4. –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logWithTimestamp(`Searching client in database for siteKey: ${trimmedSiteKey}`);
    
    const { data, error } = await sb
      .from('clients')
      .select(`
        id,
        client_name,
        api_key,
        integration_status,
        telegram_bot_token,
        telegram_chat_id,
        user_id,
        created_at
      `)
      .eq('api_key', trimmedSiteKey)
      .eq('integration_status', 'active')
      .maybeSingle();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (error) {
      logWithTimestamp(`Database error while finding client:`, {
        code: error.code,
        message: error.message,
        details: error.details
      });
      
      // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, –¥–ª—è –¥—Ä—É–≥–∏—Ö - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
      if (error.code === 'PGRST116') {
        // –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        return null;
      }
      
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      throw new Error(`Database error: ${error.message}`);
    }

    // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (!data) {
      logWithTimestamp(`Client not found for siteKey: ${trimmedSiteKey}`);
      
      // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
      clientCache.set(trimmedSiteKey, {
        client: null,
        timestamp: Date.now()
      });
      
      return null;
    }

    // 6. –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    if (!data.id || !data.client_name) {
      logWithTimestamp(`Invalid client data found:`, data);
      return null;
    }

    logWithTimestamp(`Client found in database: ${data.id} (${data.client_name})`);
    
    // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    clientCache.set(trimmedSiteKey, {
      client: data,
      timestamp: Date.now()
    });
    
    // 8. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à apiKeys
    if (!apiKeys.has(trimmedSiteKey)) {
      logWithTimestamp(`Adding client to apiKeys cache: ${data.id}`);
      apiKeys.set(trimmedSiteKey, data);
    }

    return data;
    
  } catch (error) {
    logWithTimestamp(`Critical error finding client by siteKey:`, {
      siteKey: siteKey,
      error: error.message,
      stack: error.stack
    });
    
    // –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    // –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    return null;
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫—ç—à–µ
 * @param {string} siteKey - API –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {Object|null} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 */
export async function refreshClientCache(siteKey) {
  try {
    // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∫—ç—à–µ–π
    clientCache.delete(siteKey);
    apiKeys.delete(siteKey);
    
    logWithTimestamp(`Cache cleared for siteKey: ${siteKey}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
    return await findClientBySiteKey(siteKey);
  } catch (error) {
    logWithTimestamp(`Error refreshing client cache:`, error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
 * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
 */
export function getClientCacheStats() {
  const now = Date.now();
  let activeEntries = 0;
  let expiredEntries = 0;
  
  for (const [key, value] of clientCache.entries()) {
    if (now - value.timestamp > CLIENT_CACHE_TTL) {
      expiredEntries++;
    } else {
      activeEntries++;
    }
  }
  
  return {
    totalEntries: clientCache.size,
    activeEntries,
    expiredEntries,
    apiKeysCache: apiKeys.size,
    cacheTTL: CLIENT_CACHE_TTL
  };
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
export function clearClientCache() {
  const beforeSize = clientCache.size;
  clientCache.clear();
  logWithTimestamp(`Client cache cleared: ${beforeSize} entries removed`);
  return beforeSize;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ –∫—ç—à–∞
 * @param {string} siteKey - API –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞
 * @returns {Object|null} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –∫—ç—à–µ –∏–ª–∏ null
 */
export function getClientCacheInfo(siteKey) {
  const cachedEntry = clientCache.get(siteKey);
  if (!cachedEntry) {
    return null;
  }
  
  const now = Date.now();
  const age = now - cachedEntry.timestamp;
  const isExpired = age > CLIENT_CACHE_TTL;
  
  return {
    client: cachedEntry.client,
    timestamp: cachedEntry.timestamp,
    age,
    isExpired,
    ttl: CLIENT_CACHE_TTL
  };
}