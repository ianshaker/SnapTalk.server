import express from 'express';
import { verifySupabaseToken } from '../middleware/auth.js';
import { chatVisualConfig } from '../config/chatConfig.js';

const router = express.Router();

// ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ SnapTalk =====
export const snapTalkClients = new Map(); // –í production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Supabase –∏–ª–∏ –ë–î
export const apiKeys = new Map([
  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á
  ['demo-snaptalk-2025', {
    clientName: 'Demo Client',
    domain: '*', // –ª—é–±–æ–π –¥–æ–º–µ–Ω –¥–ª—è –¥–µ–º–æ
    config: chatVisualConfig,
    language: 'ru',
    created: new Date().toISOString()
  }]
]);

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ SnapTalk
 * POST /clients/create
 */
router.post('/clients/create', verifySupabaseToken, async (req, res) => {
  try {
    const {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      clientName,
      companyName,
      email,
      phone,
      position,
      
      // –í–µ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
      websiteUrl,
      apiKey,
      widgetPosition = 'bottom-right',
      widgetColor = '#70B347',
      widgetTitle = '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
      
      // Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
      telegramBotToken,
      telegramGroupId,
      telegramBotName,
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
      operatorsCount,
      tariffPlan,
      timezone = 'Europe/Moscow',
      language = 'ru',
      autoResponses = true,
      workingHoursEnabled = false,
      offlineMessage,
      emailNotifications,
      comments,
      integrationStatus = 'pending'
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!clientName || !email || !apiKey) {
      return res.status(400).json({ 
        error: 'Required fields: clientName, email, apiKey' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
    if (snapTalkClients.has(apiKey) || apiKeys.has(apiKey)) {
      return res.status(409).json({ 
        error: 'API key already exists' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
    const clientId = `snaptalk_${Date.now()}_${Math.random().toString(36).substr(2, 8)}`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞
    const customConfig = {
      ...chatVisualConfig,
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é
      position: {
        ...chatVisualConfig.position,
        bottom: widgetPosition.includes('bottom') ? '1.5rem' : 'auto',
        top: widgetPosition.includes('top') ? '1.5rem' : 'auto',
        right: widgetPosition.includes('right') ? '1.5rem' : 'auto',
        left: widgetPosition.includes('left') ? '1.5rem' : 'auto'
      },
      minimizedButton: {
        ...chatVisualConfig.minimizedButton,
        backgroundColor: widgetColor
      },
      texts: {
        ...chatVisualConfig.texts,
        [language]: {
          ...chatVisualConfig.texts[language],
          managerName: widgetTitle || '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'
        }
      }
    };

    // –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    const clientData = {
      id: clientId,
      supabaseUserId: req.user.id,
      
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      clientName,
      companyName,
      email,
      phone,
      position,
      
      // –í–µ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
      websiteUrl,
      apiKey,
      widgetPosition,
      widgetColor,
      widgetTitle,
      
      // Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
      telegramBotToken,
      telegramGroupId,
      telegramBotName,
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
      operatorsCount,
      tariffPlan,
      timezone,
      language,
      autoResponses,
      workingHoursEnabled,
      offlineMessage,
      emailNotifications,
      comments,
      integrationStatus,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    snapTalkClients.set(clientId, clientData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –≤ —Å–∏—Å—Ç–µ–º—É –≤–∏–¥–∂–µ—Ç–æ–≤
    try {
      const domain = websiteUrl ? new URL(websiteUrl).hostname : '*';
      apiKeys.set(apiKey, {
        clientName,
        domain,
        config: customConfig,
        language,
        created: new Date().toISOString(),
        snapTalkClientId: clientId
      });
    } catch (urlError) {
      // –ï—Å–ª–∏ URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º '*'
      apiKeys.set(apiKey, {
        clientName,
        domain: '*',
        config: customConfig,
        language,
        created: new Date().toISOString(),
        snapTalkClientId: clientId
      });
    }

    console.log(`üéØ SnapTalk client created: ${clientName} (${clientId})`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    res.json({
      success: true,
      client: {
        id: clientId,
        clientName,
        companyName,
        email,
        apiKey,
        integrationStatus,
        embedCode: `<script src="${req.protocol}://${req.get('host')}/api/widget.js?key=${apiKey}" async></script>`,
        createdAt: clientData.createdAt
      }
    });

  } catch (error) {
    console.error('Create client error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /clients
 */
router.get('/clients', verifySupabaseToken, async (req, res) => {
  try {
    const userClients = Array.from(snapTalkClients.values())
      .filter(client => client.supabaseUserId === req.user.id)
      .map(client => ({
        id: client.id,
        clientName: client.clientName,
        companyName: client.companyName,
        email: client.email,
        websiteUrl: client.websiteUrl,
        apiKey: client.apiKey,
        integrationStatus: client.integrationStatus,
        language: client.language,
        createdAt: client.createdAt,
        updatedAt: client.updatedAt
      }));

    res.json({
      clients: userClients,
      total: userClients.length
    });

  } catch (error) {
    console.error('Get clients error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 * GET /clients/:id
 */
router.get('/clients/:id', verifySupabaseToken, async (req, res) => {
  try {
    const { id } = req.params;
    const client = snapTalkClients.get(id);

    if (!client) {
      return res.status(404).json({ error: 'Client not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (client.supabaseUserId !== req.user.id) {
      return res.status(403).json({ error: 'Access denied' });
    }

    res.json({ client });

  } catch (error) {
    console.error('Get client error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
 * PUT /clients/:id
 */
router.put('/clients/:id', verifySupabaseToken, async (req, res) => {
  try {
    const { id } = req.params;
    const client = snapTalkClients.get(id);

    if (!client) {
      return res.status(404).json({ error: 'Client not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (client.supabaseUserId !== req.user.id) {
      return res.status(403).json({ error: 'Access denied' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const updatedClient = {
      ...client,
      ...req.body,
      id, // –ó–∞—â–∏—â–∞–µ–º –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è ID
      supabaseUserId: client.supabaseUserId, // –ó–∞—â–∏—â–∞–µ–º –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
      updatedAt: new Date().toISOString()
    };

    snapTalkClients.set(id, updatedClient);

    // –û–±–Ω–æ–≤–ª—è–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞
    if (req.body.widgetColor || req.body.widgetPosition || req.body.language) {
      const apiKeyData = apiKeys.get(client.apiKey);
      if (apiKeyData) {
        const customConfig = {
          ...apiKeyData.config,
          position: {
            ...apiKeyData.config.position,
            bottom: updatedClient.widgetPosition.includes('bottom') ? '1.5rem' : 'auto',
            top: updatedClient.widgetPosition.includes('top') ? '1.5rem' : 'auto',
            right: updatedClient.widgetPosition.includes('right') ? '1.5rem' : 'auto',
            left: updatedClient.widgetPosition.includes('left') ? '1.5rem' : 'auto'
          },
          minimizedButton: {
            ...apiKeyData.config.minimizedButton,
            backgroundColor: updatedClient.widgetColor
          }
        };
        
        apiKeys.set(client.apiKey, {
          ...apiKeyData,
          config: customConfig,
          language: updatedClient.language
        });
      }
    }

    console.log(`üìù SnapTalk client updated: ${updatedClient.clientName} (${id})`);

    res.json({
      success: true,
      client: updatedClient
    });

  } catch (error) {
    console.error('Update client error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
 * DELETE /clients/:id
 */
router.delete('/clients/:id', verifySupabaseToken, async (req, res) => {
  try {
    const { id } = req.params;
    const client = snapTalkClients.get(id);

    if (!client) {
      return res.status(404).json({ error: 'Client not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (client.supabaseUserId !== req.user.id) {
      return res.status(403).json({ error: 'Access denied' });
    }

    // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π API –∫–ª—é—á
    snapTalkClients.delete(id);
    apiKeys.delete(client.apiKey);

    console.log(`üóëÔ∏è SnapTalk client deleted: ${client.clientName} (${id})`);

    res.json({
      success: true,
      message: 'Client deleted successfully'
    });

  } catch (error) {
    console.error('Delete client error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;
