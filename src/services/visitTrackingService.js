// ===== –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑–∏—Ç–æ–≤ =====

import { sb } from '../config/env.js';
import { findClientByApiKey, sendToTopic } from './telegramService.js';
import { checkRecentVisit, formatVisitMessage, formatReturnVisitMessage } from '../utils/visitUtils.js';

/**
 * üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑–∏—Ç–∞
 * @param {Object} visitData - –î–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç–∞
 * @param {string} visitData.apiKey - API –∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitData.visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @param {string} visitData.url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {Object} visitData.meta - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {Function} pushToClient - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function processVisit(visitData, pushToClient) {
  const { apiKey, visitorId, url, meta } = visitData;
  
  console.log(`\nüîÑ Processing visit: ${visitorId?.slice(0,8)}... -> ${url}`);
  
  try {
    // 1. –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ API –∫–ª—é—á—É
    const client = await findClientByApiKey(apiKey);
    if (!client) {
      console.log('‚ùå Client not found for API key');
      return { success: false, error: 'Client not found' };
    }
    
    console.log(`‚úÖ Client found: ${client.name} (${client.id})`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –≤–∏–∑–∏—Ç—ã
    const recentVisitInfo = await checkRecentVisit(client.id, visitorId, url);
    if (recentVisitInfo.hasRecentActivity) {
      console.log('‚è∞ Recent visit detected, skipping notification');
      return { success: true, skipped: true, reason: 'Recent visit' };
    }
    
    // 3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∏–∑–∏—Ç–∞—Ö
    const visitInfo = await getVisitInfo(client.id, visitorId);
    
    // 4. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message;
    if (visitInfo.isFirstVisit) {
      message = formatVisitMessage(client, visitorId, url, meta);
      console.log('üÜï First visit - sending new visitor notification');
    } else {
      message = formatReturnVisitMessage(
        client, 
        visitorId, 
        url, 
        meta, 
        visitInfo.previousUrl, 
        visitInfo.firstVisit
      );
      console.log('üîÑ Return visit - sending return visitor notification');
    }
    
    // 5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const telegramResult = await sendToTopic(client.id, message);
    
    // 6. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ WebSocket
    if (pushToClient) {
      pushToClient(client.id, {
        type: 'visit',
        visitorId,
        url,
        meta,
        timestamp: new Date().toISOString(),
        isFirstVisit: visitInfo.isFirstVisit
      });
    }
    
    console.log('‚úÖ Visit processed successfully');
    
    return {
      success: true,
      clientId: client.id,
      isFirstVisit: visitInfo.isFirstVisit,
      telegramSent: telegramResult.success
    };
    
  } catch (error) {
    console.error('‚ùå Error processing visit:', error);
    return { success: false, error: error.message };
  }
}

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–∑–∏—Ç–∞—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {Promise<Object>} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–∑–∏—Ç–∞—Ö
 */
async function getVisitInfo(clientId, visitorId) {
  if (!sb || !visitorId) {
    return { isFirstVisit: true, previousUrl: null, firstVisit: null };
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
    const { data: existingTopic, error } = await sb
      .from('client_topics')
      .select('page_url, created_at')
      .eq('visitor_id', visitorId)
      .single();
      
    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
      console.error('‚ùå Error checking existing topic:', error);
      return { isFirstVisit: true, previousUrl: null, firstVisit: null };
    }
    
    if (existingTopic) {
      return {
        isFirstVisit: false,
        previousUrl: existingTopic.page_url,
        firstVisit: existingTopic.created_at
      };
    } else {
      return { isFirstVisit: true, previousUrl: null, firstVisit: null };
    }
    
  } catch (error) {
    console.error('‚ùå Error getting visit info:', error);
    return { isFirstVisit: true, previousUrl: null, firstVisit: null };
  }
}

/**
 * üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–∏–∑–∏—Ç–µ
 * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export async function updateLastVisit(clientId, visitorId, url) {
  if (!sb || !visitorId) return true; // –í memory mode –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ client_topics
    const { error } = await sb
      .from('client_topics')
      .upsert({
        client_id: clientId,
        visitor_id: visitorId,
        page_url: url,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'client_id,visitor_id'
      });
      
    if (error) {
      console.error('‚ùå Error updating last visit:', error);
      return false;
    }
    
    console.log(`üìù Updated last visit for ${visitorId.slice(0,8)}...`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Error updating last visit:', error);
    return false;
  }
}