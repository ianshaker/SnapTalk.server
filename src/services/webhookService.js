/**
 * üîó WEBHOOK SERVICE
 * 
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
 * –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π webhook URL –¥–ª—è —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞.
 * 
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
 * - –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–π telegram_bot_token
 * - –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–π telegram_group_id (–æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç)
 * - –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π webhook URL: /telegram/webhook/client/{clientId}
 * - Webhook'–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
 */

import axios from 'axios';
import crypto from 'crypto';
import { sb } from '../config/env.js';

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π webhook secret –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 */
function generateWebhookSecret(clientId) {
  return crypto.createHash('sha256')
    .update(`client_${clientId}_${Date.now()}`)
    .digest('hex')
    .substring(0, 32);
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} botToken - Telegram bot token –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} domain - –î–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-app.render.com)
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
export async function setupClientWebhook(clientId, botToken, domain) {
  try {
    if (!clientId || !botToken || !domain) {
      throw new Error('Missing required parameters: clientId, botToken, domain');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π secret –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const webhookSecret = generateWebhookSecret(clientId);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π webhook URL –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const webhookUrl = `${domain}/telegram/webhook/client/${clientId}/${webhookSecret}`;
    
    console.log(`üîß Setting up webhook for client ${clientId}:`);
    console.log(`üì° Webhook URL: ${webhookUrl}`);
    console.log(`ü§ñ Bot Token: ${botToken.slice(0, 10)}...`);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('üóëÔ∏è  Removing old webhook...');
    const deleteResponse = await axios.post(`https://api.telegram.org/bot${botToken}/deleteWebhook`);
    
    if (!deleteResponse.data.ok) {
      console.log('‚ö†Ô∏è  Warning: Failed to delete old webhook:', deleteResponse.data.description);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    console.log('üîó Setting up new webhook...');
    const setResponse = await axios.post(`https://api.telegram.org/bot${botToken}/setWebhook`, {
      url: webhookUrl,
      drop_pending_updates: true
    });
    
    if (!setResponse.data.ok) {
      throw new Error(`Failed to set webhook: ${setResponse.data.description}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook secret –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (sb) {
      const { error } = await sb
        .from('clients')
        .update({ 
          telegram_webhook_secret: webhookSecret,
          telegram_webhook_url: webhookUrl,
          webhook_status: 'active',
          webhook_updated_at: new Date().toISOString()
        })
        .eq('id', clientId);
        
      if (error) {
        console.error('‚ùå Failed to save webhook secret to database:', error);
        throw new Error('Failed to save webhook configuration');
      }
    }
    
    console.log(`‚úÖ Webhook successfully configured for client ${clientId}`);
    
    return {
      success: true,
      clientId,
      webhookUrl,
      webhookSecret,
      botToken: botToken.slice(0, 10) + '...'
    };
    
  } catch (error) {
    console.error(`‚ùå Failed to setup webhook for client ${clientId}:`, error.message);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (sb) {
      await sb
        .from('clients')
        .update({ 
          webhook_status: 'failed',
          webhook_error: error.message,
          webhook_updated_at: new Date().toISOString()
        })
        .eq('id', clientId);
    }
    
    return {
      success: false,
      clientId,
      error: error.message
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å webhook –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} botToken - Telegram bot token
 * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook
 */
export async function checkClientWebhook(botToken) {
  try {
    const response = await axios.post(`https://api.telegram.org/bot${botToken}/getWebhookInfo`);
    
    if (response.data.ok) {
      return {
        success: true,
        info: response.data.result
      };
    } else {
      return {
        success: false,
        error: response.data.description
      };
    }
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç webhook –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} botToken - Telegram bot token
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
export async function removeClientWebhook(clientId, botToken) {
  try {
    console.log(`üóëÔ∏è  Removing webhook for client ${clientId}`);
    
    const response = await axios.post(`https://api.telegram.org/bot${botToken}/deleteWebhook`);
    
    if (response.data.ok) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      if (sb) {
        await sb
          .from('clients')
          .update({ 
            telegram_webhook_secret: null,
            telegram_webhook_url: null,
            webhook_status: 'removed',
            webhook_updated_at: new Date().toISOString()
          })
          .eq('id', clientId);
      }
      
      console.log(`‚úÖ Webhook removed for client ${clientId}`);
      return { success: true, clientId };
    } else {
      throw new Error(response.data.description);
    }
  } catch (error) {
    console.error(`‚ùå Failed to remove webhook for client ${clientId}:`, error.message);
    return {
      success: false,
      clientId,
      error: error.message
    };
  }
}

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook'–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
 * @param {string} domain - –î–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
export async function setupAllClientWebhooks(domain) {
  try {
    if (!sb) {
      throw new Error('Supabase connection not available');
    }
    
    console.log('üîß Setting up webhooks for all active clients...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const { data: clients, error } = await sb
      .from('clients')
      .select('id, client_name, telegram_bot_token, telegram_group_id')
      .eq('integration_status', 'active')
      .not('telegram_bot_token', 'is', null)
      .not('telegram_group_id', 'is', null);
      
    if (error) {
      throw new Error(`Failed to fetch clients: ${error.message}`);
    }
    
    if (!clients || clients.length === 0) {
      console.log('‚ö†Ô∏è  No active clients with Telegram configuration found');
      return { success: true, results: [] };
    }
    
    console.log(`üìã Found ${clients.length} clients to configure`);
    
    const results = [];
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    for (const client of clients) {
      console.log(`\nüîÑ Processing client: ${client.client_name} (${client.id})`);
      
      const result = await setupClientWebhook(
        client.id,
        client.telegram_bot_token,
        domain
      );
      
      results.push({
        clientId: client.id,
        clientName: client.client_name,
        ...result
      });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    
    console.log(`\nüéâ Webhook setup completed:`);
    console.log(`‚úÖ Successful: ${successful}`);
    console.log(`‚ùå Failed: ${failed}`);
    
    return {
      success: true,
      total: clients.length,
      successful,
      failed,
      results
    };
    
  } catch (error) {
    console.error('‚ùå Failed to setup webhooks for all clients:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}