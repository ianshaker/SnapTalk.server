/**
 * üì± TELEGRAM SERVICE
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram:
 * - –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è)
 * - –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 * 
 * –í—ã–Ω–µ—Å–µ–Ω –∏–∑ server.js –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (267 —Å—Ç—Ä–æ–∫ ‚Üí –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
 */

import axios from 'axios';
import { BOT_TOKEN, SUPERGROUP_ID, sb } from '../config/env.js';
import visitorCache from '../utils/cache/VisitorCache.js';

// ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤—è–∑–æ–∫ clientId <-> topicId =====
const memoryMap = new Map(); // clientId -> topicId

// ===== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö =====
export async function findClientByApiKey(apiKey) {
  if (!sb || !apiKey) return null;
  try {
    const { data, error } = await sb
      .from('clients')
      .select('*')
      .eq('api_key', apiKey)
      .eq('integration_status', 'active')
      .maybeSingle();
    
    if (error) {
      console.error('‚ùå Error finding client by API key:', error);
      return null;
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå findClientByApiKey error:', error);
    return null;
  }
}

export async function dbGetTopic(clientId) {
  if (!sb) return memoryMap.get(clientId) || null;
  const { data, error } = await sb
    .from('client_topics')
    .select('topic_id')
    .eq('client_id', clientId)
    .maybeSingle();
  if (error) { console.error('dbGetTopic error', error); return null; }
  return data?.topic_id ?? null;
}

// üÜï –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –ø–æ visitor_id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
export async function findExistingVisitorForClient(clientId, visitorId) {
  if (!sb || !visitorId) {
    console.log(`‚ùå findExistingVisitorForClient: No Supabase connection or visitorId`);
    return null;
  }
  
  try {
    console.log(`üîç Searching for existing visitor ${visitorId.slice(0,8)}... for client ${clientId}`);
    
    const { data, error } = await sb
      .from('client_topics')
      .select('topic_id, visitor_id, created_at, page_url, client_id')
      .eq('visitor_id', visitorId)
      .eq('client_id', clientId)  // üî• –ò—â–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!
      .maybeSingle();
    
    if (error) {
      console.error('‚ùå findExistingVisitorForClient error:', error);
      return null;
    }
    
    if (data) {
      console.log(`‚úÖ Found existing visitor for client ${clientId}: topic_id=${data.topic_id}, created_at=${data.created_at}`);
    } else {
      console.log(`‚ùå No existing visitor found for ${visitorId.slice(0,8)}... and client ${clientId}`);
    }
    
    return data; // { topic_id, visitor_id, created_at, page_url, client_id } –∏–ª–∏ null
  } catch (error) {
    console.error('‚ùå findExistingVisitorForClient error:', error);
    return null;
  }
}



// üÜï –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –ø–æ visitor_id (–ë–ï–ó client_id!) - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export async function findExistingVisitor(clientId, visitorId) {
  if (!sb || !visitorId) {
    console.log(`‚ùå findExistingVisitor: No Supabase connection or visitorId`);
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cached = visitorCache.getCachedVisitor(visitorId);
  if (cached) {
    return cached;
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º VisitorCache –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
  return await visitorCache.processWithLock(visitorId, async () => {
    console.log(`üîç Searching for existing visitor ${visitorId.slice(0,8)}... in client_topics (ANY client)`);
    
    const { data, error } = await sb
      .from('client_topics')
      .select('topic_id, visitor_id, created_at, page_url, client_id')
      .eq('visitor_id', visitorId)  // üî• –¢–û–õ–¨–ö–û –ø–æ visitor_id! –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ client_id!
      .maybeSingle();
    
    if (error) {
      console.error('‚ùå findExistingVisitor error:', error);
      return null;
    }
    
    if (data) {
      console.log(`‚úÖ Found existing visitor: topic_id=${data.topic_id}, original_client_id=${data.client_id}, created_at=${data.created_at}`);
    } else {
      console.log(`‚ùå No existing visitor found for ${visitorId.slice(0,8)}... (first visit ever)`);
    }
    
    return data; // { topic_id, visitor_id, created_at, page_url, client_id } –∏–ª–∏ null
  });
}

// üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–ø–∏–∫–∞ –≤ Telegram
export async function isTopicValidInTelegram(botToken, groupId, topicId) {
  try {
    const telegramCheckUrl = `https://api.telegram.org/bot${botToken}/getForumTopicIconStickers`;
    const { data } = await axios.post(telegramCheckUrl, {
      chat_id: groupId,
      message_thread_id: topicId
    });
    
    // –ï—Å–ª–∏ —Ç–æ–ø–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, API –≤–µ—Ä–Ω–µ—Ç ok: true
    return data?.ok === true;
  } catch (error) {
    // –ï—Å–ª–∏ —Ç–æ–ø–∏–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω - API –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É
    console.warn(`‚ö†Ô∏è Topic ${topicId} not valid in Telegram:`, error.response?.data?.description || error.message);
    return false;
  }
}

export async function dbSaveTopic(clientId, topicId, visitorId = null, requestId = null, url = null, meta = null) {
  if (!sb) { memoryMap.set(clientId, topicId); return; }
  
  const topicData = { 
    client_id: clientId, 
    topic_id: topicId,
    visitor_id: visitorId,
    request_id: requestId,
    page_url: url, // üî• –°–û–•–†–ê–ù–Ø–ï–ú URL!
    page_title: meta?.title || null,
    referrer: meta?.ref || null,
    utm_source: meta?.utm?.source || null,
    utm_medium: meta?.utm?.medium || null,
    utm_campaign: meta?.utm?.campaign || null,
    visit_type: 'page_visit', // üî• –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–∑ —Å—Ö–µ–º—ã!
    updated_at: new Date().toISOString(), // üî• –î–û–ë–ê–í–õ–ï–ù–û: –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    fingerprint_data: visitorId ? { 
      visitorId, 
      requestId, 
      url,
      meta,
      timestamp: new Date().toISOString() 
    } : null
  };
  
  // üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º visitor_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–µ–π!
  try {
    if (visitorId) {
      // –î–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Å visitor_id - –∏—â–µ–º –ø–æ visitor_id (–ë–ï–ó client_id!)
      console.log(`üîç dbSaveTopic: Checking if visitor ${visitorId.slice(0,8)}... already exists`);
      const existing = await sb
        .from('client_topics')
        .select('id, client_id, topic_id')
        .eq('visitor_id', visitorId)  // üî• –¢–û–õ–¨–ö–û –ø–æ visitor_id!
        .maybeSingle();
      
      if (existing.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å (–ù–ï –º–µ–Ω—è–µ–º client_id –∏ topic_id!)
        console.log(`üîÑ Updating existing visitor ${visitorId.slice(0,8)}... - keeping original client_id: ${existing.data.client_id}, topic_id: ${existing.data.topic_id}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –ù–ï —Ç—Ä–æ–≥–∞–µ–º client_id –∏ topic_id
        const updateData = {
          page_url: url,
          page_title: topicData.page_title,
          referrer: topicData.referrer,
          utm_source: topicData.utm_source,
          utm_medium: topicData.utm_medium,
          utm_campaign: topicData.utm_campaign,
          updated_at: topicData.updated_at,
          fingerprint_data: topicData.fingerprint_data
          // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º: client_id, topic_id (–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ!)
        };
        
        const { data, error } = await sb
          .from('client_topics')
          .update(updateData)
          .eq('id', existing.data.id)
          .select();
        
        if (error) {
          console.error('‚ùå dbSaveTopic update error:', error);
        } else {
          console.log(`‚úÖ dbSaveTopic update success - preserved original topic_id: ${existing.data.topic_id}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
          visitorCache.setCachedVisitor(visitorId, {
            topicId: existing.data.topic_id,
            clientId: existing.data.client_id,
            pageUrl: url
          });
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        console.log(`üÜï Inserting new record for visitor ${visitorId.slice(0,8)}... to client_topics`);
        const { data, error } = await sb
          .from('client_topics')
          .insert(topicData)
          .select();
        
        if (error) {
          console.error('‚ùå dbSaveTopic insert error:', error);
          console.error('‚ùå Failed topicData:', topicData);
        } else {
          console.log(`‚úÖ dbSaveTopic insert success:`, data);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
          if (visitorId) {
            visitorCache.setCachedVisitor(visitorId, {
              topicId: topicId,
              clientId: clientId,
              pageUrl: url
            });
          }
        }
      }
    } else {
      // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑ visitor_id - upsert –ø–æ client_id (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
      console.log(`üîÑ Upserting record for client ${clientId} (no visitor_id) to client_topics`);
      const { data, error } = await sb
        .from('client_topics')
        .upsert(topicData, { onConflict: 'client_id' })
        .select();
      
      if (error) {
        console.error('‚ùå dbSaveTopic upsert error:', error);
        console.error('‚ùå Failed topicData:', topicData);
      } else {
        console.log(`‚úÖ dbSaveTopic upsert success:`, data);
      }
    }
  } catch (error) {
    console.error('‚ùå dbSaveTopic error:', error);
  }
}

// ===== Site Visits Tracking =====
// üÜï –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ –≤–∏–∑–∏—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É site_visits
export async function saveSiteVisit(clientId, visitorId, requestId, url, meta, userAgent = null, ipAddress = null) {
  if (!sb) {
    console.log('‚ö†Ô∏è Supabase not available - skipping site_visits tracking');
    return;
  }

  try {
    const siteVisitData = {
      client_id: clientId,
      visitor_id: visitorId,
      request_id: requestId,
      page_url: url,
      page_title: meta?.title || null,
      referrer: meta?.ref || null,
      user_agent: userAgent,
      ip_address: ipAddress,
      utm_source: meta?.utm?.source || null,
      utm_medium: meta?.utm?.medium || null,
      utm_campaign: meta?.utm?.campaign || null,
      utm_term: meta?.utm?.term || null,
      utm_content: meta?.utm?.content || null,
      session_id: meta?.sessionId || null,
      fingerprint_data: {
        visitorId,
        requestId,
        url,
        meta,
        timestamp: new Date().toISOString(),
        userAgent,
        ipAddress
      },
      visit_timestamp: new Date().toISOString()
    };

    console.log(`üìä Saving site visit: ${visitorId.slice(0,8)}... ‚Üí ${url}`);
    
    const { data, error } = await sb
      .from('site_visits')
      .insert(siteVisitData)
      .select();

    if (error) {
      console.error('‚ùå saveSiteVisit error:', error);
      console.error('‚ùå Failed siteVisitData:', siteVisitData);
    } else {
      console.log(`‚úÖ Site visit saved: ${data[0]?.id || 'unknown'} [${visitorId.slice(0,8)}...]`);
    }
  } catch (error) {
    console.error('‚ùå saveSiteVisit error:', error);
  }
}

// ===== Telegram helpers =====
// üÜï –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
export async function ensureTopicForVisitorForClient(clientId, client, visitorId = null, requestId = null, url = null, meta = null) {
  // 1Ô∏è‚É£ –ï—Å–ª–∏ –µ—Å—Ç—å visitorId - –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  if (visitorId) {
    console.log(`üîç Checking for existing visitor: ${visitorId.slice(0,8)}... for client ${clientId}`);
    
    const existingVisitor = await findExistingVisitorForClient(clientId, visitorId);
    if (existingVisitor) {
      console.log(`üë§ Found existing visitor for client ${clientId} with topic: ${existingVisitor.topic_id}`);
      
      // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–ø–∏–∫–∞ –≤ Telegram
      const botToken = client?.telegram_bot_token || BOT_TOKEN;
      const groupId = client?.telegram_group_id || SUPERGROUP_ID;
      
      const isValidTopic = await isTopicValidInTelegram(botToken, groupId, existingVisitor.topic_id);
      if (isValidTopic) {
        console.log(`‚úÖ Topic ${existingVisitor.topic_id} is valid - reusing for visitor and client ${clientId}`);
        
        // 3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ (–ù–ï —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å!)
        try {
          const { error } = await sb
            .from('client_topics')
            .update({
              page_url: url,
              page_title: meta?.title || null,
              referrer: meta?.ref || null,
              utm_source: meta?.utm?.source || null,
              utm_medium: meta?.utm?.medium || null,
              utm_campaign: meta?.utm?.campaign || null,
              updated_at: new Date().toISOString(),
              fingerprint_data: visitorId ? { 
                visitorId, 
                requestId, 
                url,
                meta,
                timestamp: new Date().toISOString() 
              } : null
            })
            .eq('client_id', clientId)
            .eq('visitor_id', visitorId);
          
          if (error) console.error('‚ùå Update existing visitor error:', error);
          else console.log(`üîÑ Updated existing visitor metadata for client ${clientId}: ${visitorId.slice(0,8)}...`);
        } catch (error) {
          console.error('‚ùå Update existing visitor error:', error);
        }
        
        return {
          topicId: existingVisitor.topic_id,
          isExistingVisitor: true,
          previousUrl: existingVisitor.page_url,
          firstVisit: existingVisitor.created_at,
          originalClientId: existingVisitor.client_id  // üî• –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π client_id
        };
      } else {
        console.log(`‚ùå Topic ${existingVisitor.topic_id} is invalid - creating new topic for client ${clientId}`);
      }
    }
  }
  
  // 4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∏–ª–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ç–æ–ø–∏–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)
  return await createNewTopic(clientId, client, visitorId, requestId, url, meta);
}

// üÜï –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫)
export async function ensureTopicForVisitor(clientId, client, visitorId = null, requestId = null, url = null, meta = null) {
  // 1Ô∏è‚É£ –ï—Å–ª–∏ –µ—Å—Ç—å visitorId - –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
  if (visitorId) {
    console.log(`üîç Checking for existing visitor: ${visitorId.slice(0,8)}...`);
    
    const existingVisitor = await findExistingVisitor(clientId, visitorId);
    if (existingVisitor) {
      console.log(`üë§ Found existing visitor with topic: ${existingVisitor.topic_id}`);
      
      // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–ø–∏–∫–∞ –≤ Telegram
      const botToken = client?.telegram_bot_token || BOT_TOKEN;
      const groupId = client?.telegram_group_id || SUPERGROUP_ID;
      
      const isValidTopic = await isTopicValidInTelegram(botToken, groupId, existingVisitor.topic_id);
      if (isValidTopic) {
        console.log(`‚úÖ Topic ${existingVisitor.topic_id} is valid - reusing for visitor`);
        
        // 3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ (–ù–ï —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å!)
        try {
          const { error } = await sb
            .from('client_topics')
            .update({
              page_url: url,
              page_title: meta?.title || null,
              referrer: meta?.ref || null,
              utm_source: meta?.utm?.source || null,
              utm_medium: meta?.utm?.medium || null,
              utm_campaign: meta?.utm?.campaign || null,
              updated_at: new Date().toISOString(),
              fingerprint_data: visitorId ? { 
                visitorId, 
                requestId, 
                url,
                meta,
                timestamp: new Date().toISOString() 
              } : null
            })
            .eq('client_id', clientId)
            .eq('visitor_id', visitorId);
          
          if (error) console.error('‚ùå Update existing visitor error:', error);
          else console.log(`üîÑ Updated existing visitor metadata: ${visitorId.slice(0,8)}...`);
        } catch (error) {
          console.error('‚ùå Update existing visitor error:', error);
        }
        
        return {
          topicId: existingVisitor.topic_id,
          isExistingVisitor: true,
          previousUrl: existingVisitor.page_url,
          firstVisit: existingVisitor.created_at,
          originalClientId: existingVisitor.client_id  // üî• –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π client_id
        };
      } else {
        console.log(`‚ùå Topic ${existingVisitor.topic_id} is invalid - creating new topic`);
      }
    }
  }
  
  // 4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∏–ª–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ç–æ–ø–∏–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)
  return await createNewTopic(clientId, client, visitorId, requestId, url, meta);
}

// üîÑ –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è ensureTopic - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export async function ensureTopic(clientId, client, visitorId = null, requestId = null, url = null, meta = null) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–º–Ω—É—é –ª–æ–≥–∏–∫—É
  const result = await ensureTopicForVisitor(clientId, client, visitorId, requestId, url, meta);
  return typeof result === 'object' ? result.topicId : result;
}

// üÜï –í—ã–Ω–µ—Å–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞
export async function createNewTopic(clientId, client, visitorId = null, requestId = null, url = null, meta = null) {
  console.log(`üÜï Creating new topic for client: ${client?.client_name || clientId}`);
  
  let topicId = await dbGetTopic(clientId);
  if (topicId) return topicId;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
  const botToken = client?.telegram_bot_token || BOT_TOKEN;
  const groupId = client?.telegram_group_id || SUPERGROUP_ID;

  if (!botToken || !groupId) {
    throw new Error(`Telegram settings not configured for client ${client?.client_name || clientId}`);
  }

  // Create topic title with short unique ID
  const shortId = Date.now().toString(36).slice(-6);
  const title = visitorId 
    ? `–í–∏–∑–∏—Ç - ${shortId}`
    : `Client #${clientId} (${client?.client_name || 'Unknown'})`;
    
  const telegramUrl = `https://api.telegram.org/bot${botToken}/createForumTopic`;
  const { data } = await axios.post(telegramUrl, {
    chat_id: groupId,
    name: title
  });
  if (!data?.ok) throw new Error('createForumTopic failed: ' + JSON.stringify(data));
  topicId = data.result.message_thread_id;

  await dbSaveTopic(clientId, topicId, visitorId, requestId, url, meta);
  console.log(`‚úÖ Created topic ${topicId} for client ${client?.client_name || clientId}${visitorId ? ` [Visitor: ${visitorId.slice(0,8)}...]` : ''}`);
  
  return {
    topicId,
    isExistingVisitor: false
  };
}

export async function sendToTopic({ clientId, text, prefix = '', client, visitorId = null, requestId = null, url = null, meta = null }) {
  const result = await ensureTopicForVisitor(clientId, client, visitorId, requestId, url, meta);
  const topicId = typeof result === 'object' ? result.topicId : result;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
  const botToken = client?.telegram_bot_token || BOT_TOKEN;
  const groupId = client?.telegram_group_id || SUPERGROUP_ID;

  const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const msg = `${prefix}${text}`.slice(0, 4096);
  const payload = {
    chat_id: groupId,
    message_thread_id: topicId,
    text: msg,
    parse_mode: 'HTML',
    disable_web_page_preview: true
  };
  
  console.log(`üì§ Sending to Telegram: bot=${botToken.slice(0,10)}..., group=${groupId}, topic=${topicId}`);
  const { data } = await axios.post(telegramApiUrl, payload);
  if (!data?.ok) throw new Error('sendMessage failed: ' + JSON.stringify(data));
  console.log(`‚úÖ Message sent to Telegram topic ${topicId}`);
  return data.result;
}

// üÜï –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞)
export async function sendTelegramMessage(topicId, message, prefix, client) {
  const botToken = client?.telegram_bot_token || BOT_TOKEN;
  const groupId = client?.telegram_group_id || SUPERGROUP_ID;
  
  const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const fullMessage = `${prefix}${message}`.slice(0, 4096);
  
  const payload = {
    chat_id: groupId,
    message_thread_id: topicId,
    text: fullMessage,
    parse_mode: 'HTML',
    disable_web_page_preview: true
  };
  
  console.log(`üì§ Sending to Telegram topic ${topicId}: ${botToken.slice(0,10)}...`);
  const { data } = await axios.post(telegramApiUrl, payload);
  if (!data?.ok) throw new Error('sendMessage failed: ' + JSON.stringify(data));
  console.log(`‚úÖ Message sent to Telegram topic ${topicId}`);
  return data.result;
}

// –≠–∫—Å–ø–æ—Ä—Ç memoryMap –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { memoryMap };
