// ===== –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram –∫ –∫–ª–∏–µ–Ω—Ç–∞–º =====

import { sb } from '../config/env.js';
import { apiKeys } from '../routes/snapTalkClients.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏—Ö –∫–ª–∏–µ–Ω—Ç–∞–º
 * –í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
export class TelegramToClientService {
  constructor(pushToClientFunction) {
    this.pushToClient = pushToClientFunction;
    this.logPrefix = 'üì® [TelegramToClient]';
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
   * @param {Object} messageData - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram webhook
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processIncomingMessage(messageData) {
    const startTime = Date.now();
    const messageId = messageData.message?.message_id || 'unknown';
    
    console.log(`${this.logPrefix} üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è ID: ${messageId}`);
    console.log(`${this.logPrefix} üìã –í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ:`, {
      chat_id: messageData.message?.chat?.id,
      message_thread_id: messageData.message?.message_thread_id,
      text: messageData.message?.text?.substring(0, 100) + '...',
      from: messageData.message?.from?.username || messageData.message?.from?.first_name
    });

    try {
      // –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const validationResult = await this.validateIncomingMessage(messageData);
      if (!validationResult.isValid) {
        return this.createErrorResponse('VALIDATION_FAILED', validationResult.error, messageId);
      }

      const { chatId, topicId, text } = validationResult.data;

      // –®–∞–≥ 2: –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ chat_id –∏ topic_id
      const clientLookupResult = await this.findClientByTopic(chatId, topicId);
      if (!clientLookupResult.success) {
        return this.createErrorResponse('CLIENT_NOT_FOUND', clientLookupResult.error, messageId);
      }

      const { clientId, clientName } = clientLookupResult.data;

      // –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const messagePayload = this.prepareMessagePayload(text, messageData);
      
      // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket
      const deliveryResult = await this.deliverToClient(clientId, messagePayload);
      
      // –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Supabase (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      const supabaseResult = await this.broadcastViaSupabase(clientId, messagePayload);

      const processingTime = Date.now() - startTime;
      console.log(`${this.logPrefix} ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ ${processingTime}ms`);
      console.log(`${this.logPrefix} üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:`, {
        websocket: deliveryResult.success,
        supabase: supabaseResult.success,
        clientId,
        clientName
      });

      return {
        success: true,
        messageId,
        clientId,
        clientName,
        processingTime,
        delivery: {
          websocket: deliveryResult,
          supabase: supabaseResult
        }
      };

    } catch (error) {
      const processingTime = Date.now() - startTime;
      console.error(`${this.logPrefix} ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
      return this.createErrorResponse('PROCESSING_ERROR', error.message, messageId, processingTime);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
   * @param {Object} messageData - –î–∞–Ω–Ω—ã–µ –æ—Ç webhook
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  async validateIncomingMessage(messageData) {
    console.log(`${this.logPrefix} üîç –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è`);

    if (!messageData?.message) {
      console.log(`${this.logPrefix} ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç message`);
      return { isValid: false, error: 'Missing message object' };
    }

    const message = messageData.message;
    const chatId = message.chat?.id;
    const topicId = message.message_thread_id;
    const text = message.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
    if (!text || text.trim() === '') {
      console.log(`${this.logPrefix} ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞`);
      return { isValid: false, error: 'Message has no text content' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chat_id
    if (!chatId) {
      console.log(`${this.logPrefix} ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id`);
      return { isValid: false, error: 'Missing chat_id' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è topic_id
    if (!topicId) {
      console.log(`${this.logPrefix} ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message_thread_id (topic_id)`);
      return { isValid: false, error: 'Missing message_thread_id' };
    }

    console.log(`${this.logPrefix} ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞:`, {
      chatId,
      topicId,
      textLength: text.length,
      hasText: !!text
    });

    return {
      isValid: true,
      data: { chatId, topicId, text }
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ chat_id –∏ topic_id
   * @param {string} chatId - ID —á–∞—Ç–∞ Telegram
   * @param {string} topicId - ID —Ç–æ–ø–∏–∫–∞ (message_thread_id)
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
   */
  async findClientByTopic(chatId, topicId) {
    console.log(`${this.logPrefix} üîç –®–∞–≥ 2: –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ chat_id=${chatId}, topic_id=${topicId}`);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ chat_id –∏ topic_id
      console.log(`${this.logPrefix} üîé –ü–æ–∏—Å–∫ –≤ client_topics –ø–æ chat_id –∏ topic_id`);
      
      if (!sb) {
        console.log(`${this.logPrefix} ‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º memory mode`);
        return { success: false, error: 'Database not available in memory mode' };
      }

      const { data: topicData, error: topicError } = await sb
        .from('client_topics')
        .select('client_id, chat_id')
        .eq('topic_id', topicId)
        .eq('chat_id', chatId)
        .maybeSingle();

      if (topicError) {
        console.error(`${this.logPrefix} ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ client_topics:`, topicError);
        return { success: false, error: `Database error: ${topicError.message}` };
      }

      let clientId = null;
      let foundMethod = null;

      if (topicData) {
        clientId = topicData.client_id;
        foundMethod = 'chat_id + topic_id';
        console.log(`${this.logPrefix} ‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ chat_id + topic_id: ${clientId}`);
      } else {
        // Fallback: –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ topic_id
        console.log(`${this.logPrefix} üîÑ Fallback: –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ topic_id`);
        
        const { data: fallbackData, error: fallbackError } = await sb
          .from('client_topics')
          .select('client_id, chat_id')
          .eq('topic_id', topicId)
          .maybeSingle();

        if (fallbackError) {
          console.error(`${this.logPrefix} ‚ùå –û—à–∏–±–∫–∞ fallback –∑–∞–ø—Ä–æ—Å–∞:`, fallbackError);
          return { success: false, error: `Fallback database error: ${fallbackError.message}` };
        }

        if (fallbackData) {
          clientId = fallbackData.client_id;
          foundMethod = 'topic_id only (legacy)';
          console.log(`${this.logPrefix} ‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ topic_id (legacy): ${clientId}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º chat_id –¥–ª—è legacy –∑–∞–ø–∏—Å–∏
          console.log(`${this.logPrefix} üîÑ –û–±–Ω–æ–≤–ª—è–µ–º chat_id –¥–ª—è legacy –∑–∞–ø–∏—Å–∏`);
          const { error: updateError } = await sb
            .from('client_topics')
            .update({ chat_id: chatId })
            .eq('topic_id', topicId)
            .eq('client_id', clientId);

          if (updateError) {
            console.error(`${this.logPrefix} ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å chat_id:`, updateError);
          } else {
            console.log(`${this.logPrefix} ‚úÖ chat_id –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è legacy –∑–∞–ø–∏—Å–∏`);
          }
        }
      }

      if (!clientId) {
        console.log(`${this.logPrefix} ‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è topic_id=${topicId}, chat_id=${chatId}`);
        return { success: false, error: `No client found for topic_id=${topicId}` };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
      const clientInfo = await this.getClientInfo(clientId);
      
      console.log(`${this.logPrefix} ‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω:`, {
        clientId,
        clientName: clientInfo.name,
        foundMethod,
        chatId,
        topicId
      });

      return {
        success: true,
        data: {
          clientId,
          clientName: clientInfo.name,
          foundMethod
        }
      };

    } catch (error) {
      console.error(`${this.logPrefix} ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞:`, error);
      return { success: false, error: `Critical error: ${error.message}` };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
   * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
   */
  async getClientInfo(clientId) {
    console.log(`${this.logPrefix} üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ: ${clientId}`);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    for (const [apiKey, clientData] of apiKeys.entries()) {
      if (clientData.clientId === clientId) {
        console.log(`${this.logPrefix} üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ`);
        return {
          name: clientData.clientName || 'Unknown Client',
          source: 'cache'
        };
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –±–∞–∑—ã
    if (sb) {
      console.log(`${this.logPrefix} üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
      try {
        const { data, error } = await sb
          .from('clients')
          .select('client_name')
          .eq('id', clientId)
          .single();

        if (!error && data) {
          console.log(`${this.logPrefix} ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –ë–î`);
          return {
            name: data.client_name || 'Unknown Client',
            source: 'database'
          };
        }
      } catch (error) {
        console.error(`${this.logPrefix} ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ:`, error);
      }
    }

    console.log(`${this.logPrefix} ‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
    return {
      name: `Client ${clientId.slice(0, 8)}...`,
      source: 'fallback'
    };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
   * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} originalData - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
   * @returns {Object} –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π payload
   */
  prepareMessagePayload(text, originalData) {
    console.log(`${this.logPrefix} üîß –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload —Å–æ–æ–±—â–µ–Ω–∏—è`);

    const payload = {
      from: 'manager',
      text: text,
      timestamp: new Date().toISOString(),
      source: 'telegram',
      metadata: {
        telegram_message_id: originalData.message?.message_id,
        telegram_user: originalData.message?.from?.username || originalData.message?.from?.first_name,
        chat_id: originalData.message?.chat?.id,
        message_thread_id: originalData.message?.message_thread_id
      }
    };

    console.log(`${this.logPrefix} ‚úÖ Payload –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω:`, {
      textLength: text.length,
      hasMetadata: !!payload.metadata,
      timestamp: payload.timestamp
    });

    return payload;
  }

  /**
   * –î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ WebSocket
   * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
   * @param {Object} payload - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
   */
  async deliverToClient(clientId, payload) {
    console.log(`${this.logPrefix} üîå –®–∞–≥ 4: –î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);

    try {
      if (!this.pushToClient) {
        console.log(`${this.logPrefix} ‚ùå pushToClient —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        return { success: false, error: 'pushToClient function not available' };
      }

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
      this.pushToClient(clientId, payload);
      
      console.log(`${this.logPrefix} ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ WebSocket`);
      console.log(`${this.logPrefix} üìä WebSocket payload:`, {
        clientId,
        messageFrom: payload.from,
        textPreview: payload.text.substring(0, 50) + '...',
        timestamp: payload.timestamp
      });

      return {
        success: true,
        method: 'websocket',
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error(`${this.logPrefix} ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ WebSocket:`, error);
      return {
        success: false,
        error: error.message,
        method: 'websocket'
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Supabase Realtime
   * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
   * @param {Object} payload - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async broadcastViaSupabase(clientId, payload) {
    console.log(`${this.logPrefix} üì° –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Supabase Realtime`);

    try {
      if (!sb) {
        console.log(`${this.logPrefix} ‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        return { success: false, error: 'Supabase not available' };
      }

      const channel = sb.channel(`client_${clientId}`);
      const broadcastResult = await channel.send({
        type: 'broadcast',
        event: 'new_message',
        payload: payload
      });

      console.log(`${this.logPrefix} ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Supabase`);
      console.log(`${this.logPrefix} üìä Supabase broadcast result:`, broadcastResult);

      return {
        success: true,
        method: 'supabase',
        result: broadcastResult,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error(`${this.logPrefix} ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Supabase:`, error);
      return {
        success: false,
        error: error.message,
        method: 'supabase'
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
   * @param {string} errorType - –¢–∏–ø –æ—à–∏–±–∫–∏
   * @param {string} errorMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param {string} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} processingTime - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @returns {Object} –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
   */
  createErrorResponse(errorType, errorMessage, messageId, processingTime = null) {
    const errorResponse = {
      success: false,
      error: {
        type: errorType,
        message: errorMessage,
        messageId,
        timestamp: new Date().toISOString()
      }
    };

    if (processingTime !== null) {
      errorResponse.error.processingTime = processingTime;
    }

    console.log(`${this.logPrefix} ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, errorResponse.error);
    return errorResponse;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º
   * @param {Function} pushFunction - –§—É–Ω–∫—Ü–∏—è pushToClient
   */
  setPushToClientFunction(pushFunction) {
    this.pushToClient = pushFunction;
    console.log(`${this.logPrefix} ‚úÖ pushToClient —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
let serviceInstance = null;

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ singleton instance —Å–µ—Ä–≤–∏—Å–∞
 * @param {Function} pushToClientFunction - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {TelegramToClientService} Instance —Å–µ—Ä–≤–∏—Å–∞
 */
export function getTelegramToClientService(pushToClientFunction = null) {
  if (!serviceInstance) {
    serviceInstance = new TelegramToClientService(pushToClientFunction);
  } else if (pushToClientFunction) {
    serviceInstance.setPushToClientFunction(pushToClientFunction);
  }
  return serviceInstance;
}