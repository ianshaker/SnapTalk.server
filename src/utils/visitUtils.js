// ===== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤–∏–∑–∏—Ç–æ–≤ =====

import { sb } from '../config/env.js';
import { formatNewVisitorMessage, formatReturnVisitorMessage } from '../services/messageFormatterService.js';

/**
 * üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤–∏–∑–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ client_topics (–ù–ï site_visits!)
 * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @returns {Promise<Object>} - –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Å—Å–∏–∏
 */
export async function checkRecentVisit(clientId, visitorId, url) {
  if (!sb || !visitorId) return { hasRecentActivity: false, lastSessionStatus: 'active' }; // –í memory mode –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏
  
  const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000).toISOString();
  
  try {
    const { data, error } = await sb
      .from('client_topics')
      .select('updated_at, page_url, last_session_status')
      .eq('visitor_id', visitorId)
      .gte('updated_at', thirtyMinutesAgo)
      .maybeSingle();
      
    if (error) {
      console.error('‚ùå checkRecentVisit error:', error);
      return { hasRecentActivity: false, lastSessionStatus: 'active' };
    }
    
    if (data) {
      const lastSessionStatus = data.last_session_status || 'active';
      // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞, –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
      const hasRecentActivity = lastSessionStatus === 'active';
      
      if (hasRecentActivity) {
        console.log(`‚è∞ Recent activity found for visitor ${visitorId.slice(0,8)}... (within 30 min, status: ${lastSessionStatus})`);
      } else {
        console.log(`üîÑ Visitor ${visitorId.slice(0,8)}... found but session was ${lastSessionStatus}`);
      }
      
      return { hasRecentActivity, lastSessionStatus };
    }
    
    return { hasRecentActivity: false, lastSessionStatus: 'active' };
  } catch (error) {
    console.error('‚ùå checkRecentVisit error:', error);
    return { hasRecentActivity: false, lastSessionStatus: 'active' };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {Object} meta - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function formatVisitMessage(client, visitorId, url, meta) {
  return formatNewVisitorMessage({
    url,
    visitorId,
    pageTitle: meta?.title,
    meta
  });
}

/**
 * üÜï –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∑–∏—Ç–∞
 * @param {Object} client - –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @param {string} visitorId - ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @param {string} url - URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {Object} meta - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {string} previousUrl - –ü—Ä–µ–¥—ã–¥—É—â–∏–π URL
 * @param {string} firstVisit - –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function formatReturnVisitMessage(client, visitorId, url, meta, previousUrl, firstVisit) {
  return formatReturnVisitorMessage({
    url,
    visitorId,
    pageTitle: meta?.title,
    meta,
    previousUrl,
    firstVisit
  });
}