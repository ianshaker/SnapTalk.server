// ===== –û—Å–Ω–æ–≤–∞ –∫–ª–∞—Å—Å–∞ –≤–∏–¥–∂–µ—Ç–∞ SnapTalk - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ–±—ã—Ç–∏—è =====

export function generateWidgetCore() {
  return `
    constructor() {
      this.isOpen = false;
      this.isGreeting = true;
      this.messages = [];
      this.ws = null;
      this.connected = false;
      this.visitorId = null;
      this.requestId = null;
      
      // Session tracking
      this.sessionStartTime = Date.now();
      this.isSessionActive = true;
      this.lastActivityTime = Date.now();
      this.sessionInactivityTimeout = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
      this.sessionInactivityTimer = null;
      
      this.initFingerprint();
      this.init();
      this.initPageTracking();
      this.initSessionTracking();
    }
    
    init() {
      this.loadStyles();
      this.createWidget();
      this.setupAvatar();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
      setTimeout(() => this.showGreetingWithTyping(), 1000);
    }
    
    loadStyles() {
      const style = document.createElement('style');
      style.textContent = WIDGET_STYLES;
      document.head.appendChild(style);
    }
    
    createWidget() {
      this.container = document.createElement('div');
      this.container.className = 'snaptalk-widget';
      this.container.innerHTML = WIDGET_HTML;
      
      document.body.appendChild(this.container);
      this.bindEvents();
    }
    
    setupAvatar() {
      const chatAvatarEl = document.getElementById('snaptalk-chat-avatar');
      const bubbleAvatarEl = document.getElementById('snaptalk-bubble-avatar');
      
      if (MANAGER_AVATAR_URL && MANAGER_AVATAR_URL.trim()) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —á–∞—Ç–µ
        if (chatAvatarEl) {
          const chatImg = document.createElement('img');
          chatImg.src = MANAGER_AVATAR_URL;
          chatImg.alt = WIDGET_TEXTS.managerName || '–ú–µ–Ω–µ–¥–∂–µ—Ä';
          
          chatImg.onerror = () => {
            chatAvatarEl.innerHTML = 'üë®‚Äçüíº';
          };
          
          chatAvatarEl.appendChild(chatImg);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏-–∞–≤–∞—Ç–∞—Ä–∞ –≤ –ø—É–∑—ã—Ä–µ
        if (bubbleAvatarEl) {
          const bubbleImg = document.createElement('img');
          bubbleImg.src = MANAGER_AVATAR_URL;
          bubbleImg.alt = WIDGET_TEXTS.managerName || '–ú–µ–Ω–µ–¥–∂–µ—Ä';
          
          bubbleImg.onerror = () => {
            bubbleAvatarEl.innerHTML = '<span class="snaptalk-bubble-avatar-fallback">üë§</span>';
          };
          
          bubbleAvatarEl.appendChild(bubbleImg);
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ–ª–±—ç–∫ —ç–º–æ–¥–∑–∏
        if (chatAvatarEl) {
          chatAvatarEl.innerHTML = 'üë®‚Äçüíº';
        }
        if (bubbleAvatarEl) {
          bubbleAvatarEl.innerHTML = '<span class="snaptalk-bubble-avatar-fallback">üë§</span>';
        }
      }
    }
    
    bindEvents() {
      document.getElementById('snaptalk-reply').addEventListener('click', () => this.openChat());
      
      // –í–µ—Å—å –ø—É–∑—ã—Ä—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
      const bubble = document.querySelector('.snaptalk-message-bubble');
      if (bubble) {
        bubble.addEventListener('click', () => {
          this.openChat();
        });
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
      const closeBtn = document.querySelector('.chat-close-btn');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.closeChat());
      }
      
      document.getElementById('snaptalk-send').addEventListener('click', () => this.sendMessage());
      
      const input = document.getElementById('snaptalk-input');
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          this.sendMessage();
        }
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ textarea
      input.addEventListener('input', () => {
        input.style.height = 'auto';
        input.style.height = Math.min(input.scrollHeight, 100) + 'px';
      });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FingerprintJS –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    initFingerprint() {
      try {
        const fpPromise = import('https://fpjscdn.net/v3/7F2fEiOrnZIiAu3sAA7h')
          .then(FingerprintJS => FingerprintJS.load({
            region: "eu"
          }));

        fpPromise
          .then(fp => fp.get())
          .then(result => {
            this.visitorId = result.visitorId;
            this.requestId = result.requestId;
            console.log('üìå SnapTalk FingerprintJS initialized:', result.visitorId);
            
            // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–†–ï–ö–ò–ù–ì –í–ò–ó–ò–¢–ê - –û–¢–ö–õ–Æ–ß–ï–ù
            // this.trackVisit(); // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å trackPageView
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º session_start —Å–æ–±—ã—Ç–∏–µ
            this.trackSessionEvent('session_start');
          })
          .catch(error => {
            console.warn('‚ö†Ô∏è FingerprintJS failed to initialize:', error);
          });
      } catch (error) {
        console.warn('‚ö†Ô∏è FingerprintJS import failed:', error);
      }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–∏–Ω–≥ –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async trackVisit() {
      if (!this.visitorId) {
        console.warn('‚ö†Ô∏è Cannot track visit: visitorId not available');
        return;
      }
      
      try {
        const meta = {
          title: document.title,
          ref: document.referrer,
          url: window.location.href,
          userAgent: navigator.userAgent,
          utm: this.extractUTMParams()
        };
        
        const response = await fetch(SERVER_URL + '/api/visit/track', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            clientId: CLIENT_ID,
            apiKey: API_KEY,
            visitorId: this.visitorId,
            requestId: this.requestId,
            url: window.location.href,
            meta: meta
          })
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('üë§ Visit tracked successfully:', result);
        } else {
          console.warn('‚ö†Ô∏è Visit tracking failed:', response.status);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Visit tracking error:', error);
      }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–∏–Ω–≥ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è SPA
    async trackPageView(url = window.location.href, title = document.title) {
      if (!this.visitorId) {
        console.warn('‚ö†Ô∏è Cannot track page view: visitorId not available');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      this.updateLastActivity();
      
      try {
        const response = await fetch(SERVER_URL + '/api/track/page', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            siteKey: API_KEY,
            visitorId: this.visitorId,
            requestId: this.requestId, // request_id –æ—Ç fingerprint —Å–µ—Ä–≤–∏—Å–∞
            url: url,
            title: title,
            referrer: document.referrer,
            userAgent: navigator.userAgent,
            // Session tracking –ø–æ–ª—è
            eventType: 'page_view',
            isSessionActive: this.isSessionActive
            // sessionDuration —É–±–∏—Ä–∞–µ–º - –æ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è session_end —Å–æ–±—ã—Ç–∏–π
          })
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('üìÑ Page view tracked successfully:', result);
        } else {
          console.warn('‚ö†Ô∏è Page view tracking failed:', response.status);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Page view tracking error:', error);
      }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ SPA
    initPageTracking() {
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (document.readyState === 'complete') {
        setTimeout(() => this.trackInitialPageView(), 2000);
      } else {
        window.addEventListener('load', () => {
          setTimeout(() => this.trackInitialPageView(), 2000);
        });
      }
      
      // Monkey-patch History API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è SPA –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
      const originalPushState = history.pushState;
      const originalReplaceState = history.replaceState;
      
      history.pushState = (...args) => {
        originalPushState.apply(history, args);
        setTimeout(() => this.handleSPANavigation(), 100);
      };
      
      history.replaceState = (...args) => {
        originalReplaceState.apply(history, args);
        setTimeout(() => this.handleSPANavigation(), 100);
      };
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥)
      window.addEventListener('popstate', () => {
        setTimeout(() => this.handleSPANavigation(), 100);
      });
    }
    
    // –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async trackInitialPageView() {
      if (this.visitorId) {
        await this.trackPageView();
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ SPA –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    async handleSPANavigation() {
      if (this.visitorId) {
        await this.trackPageView();
      }
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
    extractUTMParams() {
      const urlParams = new URLSearchParams(window.location.search);
      return {
        source: urlParams.get('utm_source'),
        medium: urlParams.get('utm_medium'),
        campaign: urlParams.get('utm_campaign'),
        term: urlParams.get('utm_term'),
        content: urlParams.get('utm_content')
      };
    }
    
    // ===== SESSION TRACKING METHODS =====
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
    initSessionTracking() {
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ['click', 'scroll', 'keypress', 'mousemove'].forEach(event => {
        document.addEventListener(event, () => this.updateLastActivity(), { passive: true });
      });
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          this.trackSessionEvent('tab_switch', { action: 'hidden' });
        } else {
          this.trackSessionEvent('tab_switch', { action: 'visible' });
          this.updateLastActivity();
        }
      });
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      window.addEventListener('beforeunload', () => {
        this.trackSessionEvent('session_end');
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      this.resetInactivityTimer();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    updateLastActivity() {
      this.lastActivityTime = Date.now();
      this.resetInactivityTimer();
    }
    
    // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    resetInactivityTimer() {
      if (this.sessionInactivityTimer) {
        clearTimeout(this.sessionInactivityTimer);
      }
      
      this.sessionInactivityTimer = setTimeout(() => {
        if (this.isSessionActive) {
          this.trackSessionEvent('session_end', { reason: 'inactivity' });
          this.isSessionActive = false;
        }
      }, this.sessionInactivityTimeout);
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ session —Å–æ–±—ã—Ç–∏—è
    async trackSessionEvent(eventType, additionalData = {}) {
      if (!this.visitorId) {
        console.warn('‚ö†Ô∏è Cannot track session event: visitorId not available');
        return;
      }
      
      try {
        const payload = {
          siteKey: API_KEY,
          visitorId: this.visitorId,
          requestId: this.requestId,
          eventType: eventType,
          url: window.location.href,
          title: document.title,
          userAgent: navigator.userAgent,
          isSessionActive: this.isSessionActive,
          ...additionalData
        };
        
        // –î–ª—è session_end –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (eventType === 'session_end') {
          payload.isSessionEnd = true;
          payload.sessionDuration = Date.now() - this.sessionStartTime;
          this.isSessionActive = false;
        } else if (eventType === 'session_start') {
          payload.isSessionStart = true;
        }
        
        const response = await fetch(SERVER_URL + '/api/track/session', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log(\`üîÑ Session event '\${eventType}' tracked successfully:\`, result);
        } else {
          console.warn(\`‚ö†Ô∏è Session event '\${eventType}' tracking failed:\`, response.status);
        }
      } catch (error) {
        console.warn(\`‚ö†Ô∏è Session event '\${eventType}' tracking error:\`, error);
      }
    }
  `;
}
