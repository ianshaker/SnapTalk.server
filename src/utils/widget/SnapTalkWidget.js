// ===== –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≤–∏–¥–∂–µ—Ç–∞ SnapTalk =====

export function generateWidgetClass() {
  return `
  class SnapTalkWidget {
    constructor() {
      this.isOpen = false;
      this.isGreeting = true;
      this.messages = [];
      this.ws = null;
      this.connected = false;
      
      this.init();
    }
    
    init() {
      this.loadStyles();
      this.createWidget();
      this.setupAvatar();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
      setTimeout(() => this.showGreetingWithTyping(), 1000);
    }
    
    loadStyles() {
      const style = document.createElement('style');
      style.textContent = WIDGET_STYLES;
      document.head.appendChild(style);
    }
    
    createWidget() {
      this.container = document.createElement('div');
      this.container.className = 'snaptalk-widget';
      this.container.innerHTML = WIDGET_HTML;
      
      document.body.appendChild(this.container);
      this.bindEvents();
    }
    
    setupAvatar() {
      const avatarEl = document.getElementById('snaptalk-avatar');
      const chatAvatarEl = document.getElementById('snaptalk-chat-avatar');
      
      if (MANAGER_AVATAR_URL && MANAGER_AVATAR_URL.trim()) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
        if (avatarEl) {
          const img = document.createElement('img');
          img.src = MANAGER_AVATAR_URL;
          img.alt = WIDGET_TEXTS.managerName || '–ú–µ–Ω–µ–¥–∂–µ—Ä';
          
          img.onerror = () => {
            avatarEl.innerHTML = '<span class="snaptalk-avatar-fallback">üë§</span>';
          };
          
          avatarEl.appendChild(img);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —á–∞—Ç–µ
        if (chatAvatarEl) {
          const chatImg = document.createElement('img');
          chatImg.src = MANAGER_AVATAR_URL;
          chatImg.alt = WIDGET_TEXTS.managerName || '–ú–µ–Ω–µ–¥–∂–µ—Ä';
          
          chatImg.onerror = () => {
            chatAvatarEl.innerHTML = 'üë®‚Äçüíº';
          };
          
          chatAvatarEl.appendChild(chatImg);
        }
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ–ª–±—ç–∫ —ç–º–æ–¥–∑–∏
        if (avatarEl) {
          avatarEl.innerHTML = '<span class="snaptalk-avatar-fallback">üëã</span>';
        }
        if (chatAvatarEl) {
          chatAvatarEl.innerHTML = 'üë®‚Äçüíº';
        }
      }
    }
    
    bindEvents() {
      document.getElementById('snaptalk-toggle').addEventListener('click', () => this.toggleWidget());
      document.getElementById('snaptalk-reply').addEventListener('click', () => this.openChat());
      document.getElementById('snaptalk-send').addEventListener('click', () => this.sendMessage());
      
      const input = document.getElementById('snaptalk-input');
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          this.sendMessage();
        }
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ textarea
      input.addEventListener('input', () => {
        input.style.height = 'auto';
        input.style.height = Math.min(input.scrollHeight, 100) + 'px';
      });
    }
    
    async showGreetingWithTyping() {
      if (this.isOpen) return;
      
      const greetingEl = document.getElementById('snaptalk-greeting');
      const textEl = document.getElementById('snaptalk-greeting-text');
      const replyBtn = document.getElementById('snaptalk-reply');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      greetingEl.classList.remove('snaptalk-hidden');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∞–Ω–∏—è
      textEl.innerHTML = \`
        <div style="display: flex; align-items: center; gap: 8px; padding: 4px 0;">
          <span class="snaptalk-typing">
            <span class="snaptalk-typing-dot"></span>
            <span class="snaptalk-typing-dot"></span>
            <span class="snaptalk-typing-dot"></span>
          </span>
          <span style="color: var(--snaptalk-text-muted); font-size: 13px; font-style: italic;">
            \${WIDGET_TEXTS.managerName || '–ú–µ–Ω–µ–¥–∂–µ—Ä'} –ø–µ—á–∞—Ç–∞–µ—Ç...
          </span>
        </div>
      \`;
      
      // –ß–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º
      setTimeout(() => {
        const text = WIDGET_TEXTS.greeting || '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
        textEl.innerHTML = text; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –≤–µ—Å—å
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å" —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
          replyBtn.classList.remove('snaptalk-hidden');
        }, 500);
      }, 2500);
    }
    
    typeText(element, text, callback) {
      element.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é (—É–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏)
      let i = 0;
      
      const typeChar = () => {
        if (i < text.length) {
          element.innerHTML += text.charAt(i);
          i++;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥–∞—é—â–∏–π –∫—É—Ä—Å–æ—Ä –≤–æ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
          const cursor = '<span style="animation: blink 1s infinite; margin-left: 1px; color: var(--snaptalk-primary);">|</span>';
          element.innerHTML += cursor;
          
          setTimeout(() => {
            // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∏–º–≤–æ–ª–æ–º
            element.innerHTML = element.innerHTML.replace(cursor, '');
            typeChar();
          }, Math.random() * 60 + 30); // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç 30 –¥–æ 90ms –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        } else {
          // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω—Ü–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
          element.innerHTML = text;
          if (callback) {
            setTimeout(callback, 800);
          }
        }
      };
      
      typeChar();
    }
    
    // –ú–µ—Ç–æ–¥ hideGreeting —É–¥–∞–ª–µ–Ω - –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ–ª—å—à–µ –Ω–µ—Ç
    
    toggleWidget() {
      if (this.isOpen) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
      } else {
        this.openChat();
      }
    }
    
    connectWebSocket() {
      if (this.ws) {
        this.ws.close();
      }
      
      this.updateConnectionStatus('connecting');
      
      try {
        const protocol = SERVER_URL.startsWith('https') ? 'wss' : 'ws';
        const wsUrl = SERVER_URL.replace(/^https?/, protocol) + '/ws?clientId=' + CLIENT_ID;
        
        console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
          console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
          this.connected = true;
          this.updateConnectionStatus('connected');
        };
        
        this.ws.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data);
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
            
            if (data.from === 'manager') {
              this.addMessage(data.text, 'manager');
            }
          } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
          }
        };
        
        this.ws.onclose = () => {
          console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
          this.connected = false;
          this.updateConnectionStatus('disconnected');
          
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            if (!this.connected && this.isOpen) {
              this.connectWebSocket();
            }
          }, 3000);
        };
        
        this.ws.onerror = (error) => {
          console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
          this.connected = false;
          this.updateConnectionStatus('disconnected');
        };
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
        this.updateConnectionStatus('disconnected');
      }
    }
    
    updateConnectionStatus(status) {
      const statusEl = document.getElementById('snaptalk-connection-status');
      if (!statusEl) return;
      
      statusEl.className = 'snaptalk-connection-status ' + status;
      
      switch (status) {
        case 'connected':
          statusEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω';
          break;
        case 'connecting':
          statusEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
          break;
        case 'disconnected':
          statusEl.textContent = '–ù–µ—Ç —Å–≤—è–∑–∏';
          break;
      }
    }
    
    openChat() {
      this.isOpen = true;
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      const greetingEl = document.getElementById('snaptalk-greeting');
      greetingEl.classList.add('snaptalk-hidden');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫—Ä—É–∂–æ–∫
      document.getElementById('snaptalk-toggle').classList.add('snaptalk-hidden');
      document.getElementById('snaptalk-chat').classList.remove('snaptalk-hidden');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      if (!this.connected) {
        this.connectWebSocket();
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
      if (this.messages.length === 0) {
        setTimeout(() => {
          this.addMessage(WIDGET_TEXTS.greeting || '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', 'manager');
        }, 500);
      }
      
      console.log('‚úÖ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç');
    }
    
    // –ú–µ—Ç–æ–¥ closeChat —É–¥–∞–ª–µ–Ω - –∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    
    addMessage(text, type) {
      const messagesContainer = document.getElementById('snaptalk-messages');
      const messageEl = document.createElement('div');
      messageEl.className = \`snaptalk-message \${type}\`;
      messageEl.textContent = text;
      
      messagesContainer.appendChild(messageEl);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      
      this.messages.push({ text, type, timestamp: Date.now() });
    }
    
    async sendMessage() {
      const input = document.getElementById('snaptalk-input');
      const text = input.value.trim();
      
      if (!text) return;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.addMessage(text, 'user');
      input.value = '';
      input.style.height = 'auto';
      
      try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);
        
        // –°–æ–±–∏—Ä–∞–µ–º UTM –º–µ—Ç–∫–∏ –∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
        const urlParams = new URLSearchParams(window.location.search);
        const meta = {
          utm: {
            source: urlParams.get('utm_source'),
            medium: urlParams.get('utm_medium'),
            campaign: urlParams.get('utm_campaign'),
            term: urlParams.get('utm_term'),
            content: urlParams.get('utm_content')
          },
          ref: document.referrer,
          url: window.location.href,
          userAgent: navigator.userAgent
        };
        
        const response = await fetch(SERVER_URL + '/api/chat/send', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            clientId: CLIENT_ID,
            apiKey: API_KEY,
            text: text,
            meta: meta
          })
        });
        
        if (!response.ok) {
          throw new Error(\`HTTP \${response.status}\`);
        }
        
        const result = await response.json();
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        this.addMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'system');
      }
    }
  }
  `;
}
