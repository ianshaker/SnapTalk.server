// ===== WebSocket –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ SnapTalk =====

export function generateWidgetWebSocket() {
  return `
    connectWebSocket() {
      if (this.ws) {
        this.ws.close();
      }
      
      this.updateConnectionStatus('connecting');
      
      try {
        const protocol = SERVER_URL.startsWith('https') ? 'wss' : 'ws';
        const wsUrl = SERVER_URL.replace(/^https?/, protocol) + '/ws?clientId=' + CLIENT_ID;
        
        console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
          console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
          this.connected = true;
          this.updateConnectionStatus('connected');
        };
        
        this.ws.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data);
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
            
            if (data.from === 'manager') {
              this.addMessage(data.text, 'manager');
            }
          } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
          }
        };
        
        this.ws.onclose = () => {
          console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
          this.connected = false;
          this.updateConnectionStatus('disconnected');
          
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            if (!this.connected && this.isOpen) {
              this.connectWebSocket();
            }
          }, 3000);
        };
        
        this.ws.onerror = (error) => {
          console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
          this.connected = false;
          this.updateConnectionStatus('disconnected');
        };
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
        this.updateConnectionStatus('disconnected');
      }
    }
    
    updateConnectionStatus(status) {
      const statusEl = document.getElementById('snaptalk-connection-status');
      if (!statusEl) return;
      
      statusEl.className = 'snaptalk-connection-status ' + status;
      
      switch (status) {
        case 'connected':
          statusEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω';
          break;
        case 'connecting':
          statusEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
          break;
        case 'disconnected':
          statusEl.textContent = '–ù–µ—Ç —Å–≤—è–∑–∏';
          break;
      }
    }
  `;
}
