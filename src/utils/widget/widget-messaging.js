// ===== –õ–æ–≥–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —á–∞—Ç–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞ SnapTalk =====

export function generateWidgetMessaging() {
  return `
    openChat() {
      this.isOpen = true;
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
      const greetingEl = document.getElementById('snaptalk-greeting');
      greetingEl.classList.add('snaptalk-hidden');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫—Ä—É–∂–æ–∫
      document.getElementById('snaptalk-toggle').classList.add('snaptalk-hidden');
      document.getElementById('snaptalk-chat').classList.remove('snaptalk-hidden');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      if (!this.connected) {
        this.connectWebSocket();
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
      if (this.messages.length === 0) {
        setTimeout(() => {
          this.addMessage(WIDGET_TEXTS.greeting || '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', 'manager');
        }, 500);
      }
      
      console.log('‚úÖ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç');
    }
    
    // –ú–µ—Ç–æ–¥ closeChat —É–¥–∞–ª–µ–Ω - –∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    
    addMessage(text, type) {
      const messagesContainer = document.getElementById('snaptalk-messages');
      const messageEl = document.createElement('div');
      messageEl.className = \`snaptalk-message \${type}\`;
      messageEl.textContent = text;
      
      messagesContainer.appendChild(messageEl);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      
      this.messages.push({ text, type, timestamp: Date.now() });
    }
    
    async sendMessage() {
      const input = document.getElementById('snaptalk-input');
      const text = input.value.trim();
      
      if (!text) return;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.addMessage(text, 'user');
      input.value = '';
      input.style.height = 'auto';
      
      try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);
        
        // –°–æ–±–∏—Ä–∞–µ–º UTM –º–µ—Ç–∫–∏ –∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
        const urlParams = new URLSearchParams(window.location.search);
        const meta = {
          utm: {
            source: urlParams.get('utm_source'),
            medium: urlParams.get('utm_medium'),
            campaign: urlParams.get('utm_campaign'),
            term: urlParams.get('utm_term'),
            content: urlParams.get('utm_content')
          },
          ref: document.referrer,
          url: window.location.href,
          userAgent: navigator.userAgent
        };
        
        const response = await fetch(SERVER_URL + '/api/chat/send', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            clientId: CLIENT_ID,
            apiKey: API_KEY,
            text: text,
            meta: meta,
            visitorId: this.visitorId,   // FingerprintJS visitor ID
            requestId: this.requestId    // FingerprintJS request ID
          })
        });
        
        if (!response.ok) {
          throw new Error(\`HTTP \${response.status}\`);
        }
        
        const result = await response.json();
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result);
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        this.addMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'system');
      }
    }
  `;
}
