// ===== –ú–æ–¥—É–ª—å —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è SnapTalk –≤–∏–¥–∂–µ—Ç–∞ =====

export class PageTracker {
  constructor(trackingService) {
    this.trackingService = trackingService;
    this.serverUrl = trackingService.serverUrl;
    this.apiKey = trackingService.apiKey;
    
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.isInitialized = false;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–∏–Ω–≥ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è SPA
  async trackPageView(url = window.location.href, title = document.title) {
    if (!this.trackingService.isReady()) {
      console.warn('‚ö†Ô∏è Cannot track page view: TrackingService not ready');
      return;
    }
    
    const { visitorId, requestId } = this.trackingService.getIdentifiers();
    
    // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ SessionTracker –≤ widget-core.js
    
    try {
      const response = await fetch(this.serverUrl + '/api/track/page', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          siteKey: this.apiKey, // API_KEY –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ siteKey –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          visitorId: visitorId,
          requestId: requestId, // request_id –æ—Ç fingerprint —Å–µ—Ä–≤–∏—Å–∞
          url: url,
          title: title,
          referrer: document.referrer,
          userAgent: navigator.userAgent,
          // Session tracking –ø–æ–ª—è
          eventType: 'page_view'
          // isSessionActive —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ SessionTracker
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        console.log('üìÑ Page view tracked successfully:', result);
      } else {
        console.warn('‚ö†Ô∏è Page view tracking failed:', response.status);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Page view tracking error:', error);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ SPA
  initPageTracking() {
    if (this.isInitialized) {
      console.warn('‚ö†Ô∏è PageTracking already initialized');
      return;
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'complete') {
      setTimeout(() => this.trackInitialPageView(), 2000);
    } else {
      window.addEventListener('load', () => {
        setTimeout(() => this.trackInitialPageView(), 2000);
      });
    }
    
    // Monkey-patch History API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è SPA –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;
    
    history.pushState = (...args) => {
      originalPushState.apply(history, args);
      setTimeout(() => this.handleSPANavigation(), 100);
    };
    
    history.replaceState = (...args) => {
      originalReplaceState.apply(history, args);
      setTimeout(() => this.handleSPANavigation(), 100);
    };
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥)
    window.addEventListener('popstate', () => {
      setTimeout(() => this.handleSPANavigation(), 100);
    });
    
    this.isInitialized = true;
    console.log('üìÑ PageTracker initialized successfully');
  }

  // –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async trackInitialPageView() {
    if (this.trackingService.isReady()) {
      await this.trackPageView();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ SPA –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  async handleSPANavigation() {
    if (this.trackingService.isReady()) {
      await this.trackPageView();
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ monkey-patching (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  cleanup() {
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ History API
    console.log('üìÑ PageTracker cleanup called');
  }
}