import { sb } from './src/config/env.js';

async function checkSiteVisitsSchema() {
  try {
    console.log('üîç Checking site_visits table schema...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const testData = {
      client_id: 'test-client',
      visitor_id: 'test-visitor',
      page_url: 'https://test.com'
    };
    
    const { error: insertError } = await sb
      .from('site_visits')
      .insert(testData);
    
    if (insertError) {
      console.log('‚ùå Insert error with minimal data:', insertError.message);
    } else {
      console.log('‚úÖ Minimal insert successful');
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await sb
        .from('site_visits')
        .delete()
        .eq('client_id', 'test-client')
        .eq('visitor_id', 'test-visitor');
    }
    
    // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —Å session_duration –∏ updated_at
    const testDataWithSession = {
      client_id: 'test-client-2',
      visitor_id: 'test-visitor-2',
      page_url: 'https://test.com',
      session_duration: '5000',
      updated_at: new Date().toISOString()
    };
    
    const { error: sessionError } = await sb
      .from('site_visits')
      .insert(testDataWithSession);
    
    if (sessionError) {
      console.log('‚ùå Insert error with session fields:', sessionError.message);
    } else {
      console.log('‚úÖ Insert with session fields successful');
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await sb
        .from('site_visits')
        .delete()
        .eq('client_id', 'test-client-2')
        .eq('visitor_id', 'test-visitor-2');
    }
    
  } catch (error) {
    console.error('‚ùå Script error:', error);
  }
}

checkSiteVisitsSchema();