import http from 'http';
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import axios from 'axios';
import { WebSocketServer } from 'ws';
import { 
  PORT, 
  BOT_TOKEN, 
  SUPERGROUP_ID, 
  WEBHOOK_SECRET, 
  allowedOrigins,
  sb,
  sbAuth,
  SUPABASE_URL,
  SUPABASE_SERVICE_ROLE,
  SUPABASE_ANON_KEY
} from './src/config/env.js';
import snapTalkRoutes from './src/routes/snapTalkClients.js';
import widgetRoutes from './src/routes/widgets.js';
import { apiKeys } from './src/routes/snapTalkClients.js';

const app = express();

// CORS: —Ä–∞–∑—Ä–µ—à–∞–µ–º SnapTalk —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ *.lovable.app
app.use(cors({
  origin: (origin, cb) => {
    if (!origin) return cb(null, true); // health, Postman, Telegram webhook
    if (allowedOrigins.includes(origin) || /\.lovable\.app$/i.test(origin)) return cb(null, true);
    return cb(new Error('Not allowed by CORS'));
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));
app.options('*', cors());

app.use(bodyParser.json({ limit: '1mb' }));

// ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤—è–∑–æ–∫ clientId <-> topicId =====
const memoryMap = new Map(); // clientId -> topicId

// ===== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö =====
async function dbGetTopic(clientId) {
  if (!sb) return memoryMap.get(clientId) || null;
  const { data, error } = await sb
    .from('client_topics')
    .select('topic_id')
    .eq('client_id', clientId)
    .maybeSingle();
  if (error) { console.error('dbGetTopic error', error); return null; }
  return data?.topic_id ?? null;
}

async function dbSaveTopic(clientId, topicId) {
  if (!sb) { memoryMap.set(clientId, topicId); return; }
  const { error } = await sb
    .from('client_topics')
    .upsert({ client_id: clientId, topic_id: topicId }, { onConflict: 'client_id' });
  if (error) console.error('dbSaveTopic error', error);
}

// ===== Telegram helpers =====
async function ensureTopic(clientId) {
  let topicId = await dbGetTopic(clientId);
  if (topicId) return topicId;

  if (!BOT_TOKEN || !SUPERGROUP_ID) {
    throw new Error('Telegram env vars not set (BOT_TOKEN or SUPERGROUP_ID)');
  }

  const title = `Client #${clientId}`;
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/createForumTopic`;
  const { data } = await axios.post(url, {
    chat_id: SUPERGROUP_ID,
    name: title
  });
  if (!data?.ok) throw new Error('createForumTopic failed: ' + JSON.stringify(data));
  topicId = data.result.message_thread_id;

  await dbSaveTopic(clientId, topicId);
  return topicId;
}

async function sendToTopic({ clientId, text, prefix = '' }) {
  const topicId = await ensureTopic(clientId);

  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  const msg = `${prefix}${text}`.slice(0, 4096);
  const payload = {
    chat_id: SUPERGROUP_ID,
    message_thread_id: topicId,
    text: msg,
    parse_mode: 'HTML',
    disable_web_page_preview: true
  };
  const { data } = await axios.post(url, payload);
  if (!data?.ok) throw new Error('sendMessage failed: ' + JSON.stringify(data));
  return data.result;
}

// ===== –ú–∞—Ä—à—Ä—É—Ç—ã API =====
app.use('/api/snaptalk', snapTalkRoutes);
app.use('/api', widgetRoutes);

// ===== –û—Å–Ω–æ–≤–Ω—ã–µ —Ä—É—Ç—ã =====
app.get('/health', (_req, res) => res.json({ ok: true, ts: Date.now() }));
app.get('/favicon.ico', (_req, res) => res.sendStatus(204));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π
app.get('/', (req, res) => {
  const demoKey = 'demo-snaptalk-2025';
  const serverUrl = req.protocol + '://' + req.get('host');
  
  const htmlContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SnapTalk Server - Live Chat Widget</title>
    <style>
        body { 
            font-family: system-ui, -apple-system, sans-serif; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 2rem; 
            line-height: 1.6;
        }
        .hero { 
            text-align: center; 
            margin-bottom: 3rem; 
            padding: 2rem; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 1rem;
        }
        .section { 
            background: #f8fafc; 
            padding: 1.5rem; 
            border-radius: 0.5rem; 
            margin-bottom: 2rem; 
        }
        .code { 
            background: #1e293b; 
            color: #e2e8f0; 
            padding: 1rem; 
            border-radius: 0.5rem; 
            font-family: 'Monaco', 'Menlo', monospace; 
            overflow-x: auto;
            margin: 1rem 0;
        }
        .api-endpoint {
            background: #0ea5e9;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            font-family: monospace;
            display: inline-block;
            margin: 0.25rem;
        }
    </style>
</head>
<body>
    <div class="hero">
        <h1>üöÄ SnapTalk Server</h1>
        <p>Modern live chat widget with Telegram integration</p>
    </div>

    <div class="section">
        <h2>üíª Embed Code –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤</h2>
        <p>–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–≤–æ–π —Å–∞–π—Ç:</p>
        <div class="code">&lt;script src="${serverUrl}/api/widget.js?key=${demoKey}" async&gt;&lt;/script&gt;</div>
        <p><strong>–≠—Ç–æ –≤—Å—ë!</strong> –í–∏–¥–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç–∏–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞.</p>
    </div>

    <div class="section">
        <h2>üîß API Endpoints</h2>
        
        <h3>–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:</h3>
        <div class="api-endpoint">GET /api/widget.js?key=API_KEY</div> - –ü–æ–ª—É—á–∏—Ç—å JavaScript –∫–æ–¥ –≤–∏–¥–∂–µ—Ç–∞<br>
        <div class="api-endpoint">GET /api/widget/config?key=API_KEY</div> - –ü–æ–ª—É—á–∏—Ç—å JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é<br>
        <div class="api-endpoint">POST /api/chat/send</div> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram<br>
        <div class="api-endpoint">WebSocket /ws?clientId=ID</div> - –ü–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏<br>
        
        <h3>SnapTalk Frontend Integration (Auth required):</h3>
        <div class="api-endpoint">POST /api/snaptalk/clients/create</div> - –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞<br>
        <div class="api-endpoint">GET /api/snaptalk/clients</div> - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤<br>
        <div class="api-endpoint">GET /api/snaptalk/clients/:id</div> - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞<br>
        <div class="api-endpoint">PUT /api/snaptalk/clients/:id</div> - –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞<br>
        <div class="api-endpoint">DELETE /api/snaptalk/clients/:id</div> - –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞<br>
    </div>

    <!-- –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–µ–º–æ –≤–∏–¥–∂–µ—Ç -->
    <script src="/api/widget.js?key=${demoKey}" async></script>
</body>
</html>
  `;
  
  res.type('text/html').send(htmlContent);
});

// ===== API: —Å–∞–π—Ç -> Telegram =====
app.post('/api/chat/send', async (req, res) => {
  try {
    const { clientId, text, meta } = req.body || {};
    if (!clientId || !text) {
      return res.status(400).json({ ok: false, error: 'clientId and text required' });
    }

    const utm = meta?.utm || {};
    const ref = meta?.ref || '';
    const prefixParts = [
      `#${clientId}`,
      utm.source ? `${utm.source}` : null,
      utm.campaign ? `${utm.campaign}` : null,
      utm.term ? `${utm.term}` : null,
      ref ? `ref:${ref}` : null,
    ].filter(Boolean);
    const prefix = prefixParts.length ? `${prefixParts.join(' / ')}\n\n` : `#${clientId}\n\n`;

    console.log(`üí¨ Site ‚Üí Telegram: "${text}" ‚Üí ${clientId}`);
    await sendToTopic({ clientId, text, prefix });
    return res.json({ ok: true });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ ok: false, error: String(e.message || e) });
  }
});

// ===== Webhook: Telegram -> —Å–∞–π—Ç (–æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞) =====
app.post(`/telegram/webhook/${WEBHOOK_SECRET}`, async (req, res) => {
  try {
    const update = req.body;
    const msg = update?.message;
    const text = msg?.text;
    const topicId = msg?.message_thread_id;
    const chatId = msg?.chat?.id;

    // –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–∞—Ö –Ω–∞—à–µ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if (!text || !topicId || chatId !== SUPERGROUP_ID) {
      return res.sendStatus(200);
    }

    // –ò—â–µ–º clientId –ø–æ topicId
    let clientId = null;
    if (sb) {
      const { data, error } = await sb
        .from('client_topics')
        .select('client_id')
        .eq('topic_id', topicId)
        .maybeSingle();
      if (!error) clientId = data?.client_id || null;
    } else {
      for (const [cid, tid] of memoryMap.entries()) {
        if (tid === topicId) { clientId = cid; break; }
      }
    }

    if (!clientId) return res.sendStatus(200);

    console.log(`üì± Telegram ‚Üí Site: "${text}" ‚Üí ${clientId}`);

    // 1) Supabase Broadcast (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω)
    if (sb) {
      try {
        await sb.channel(`client:${clientId}`).send({
          type: 'broadcast',
          event: 'manager_message',
          payload: { from: 'manager', text, ts: Date.now() }
        });
      } catch (broadcastError) {
        console.error('‚ùå Supabase broadcast error:', broadcastError);
      }
    }

    // 2) WebSocket push (–≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏)
    const payload = { from: 'manager', text, ts: Date.now() };
    pushToClient(clientId, payload);

    return res.sendStatus(200);
  } catch (e) {
    console.error('webhook error', e);
    return res.sendStatus(200);
  }
});

// ===== HTTP+WS —Å–µ—Ä–≤–µ—Ä –∏ WS-—Ö–∞–± =====
const server = http.createServer(app);
const wss = new WebSocketServer({ server, path: '/ws' });

// clientId -> Set<WebSocket>
const hub = new Map();

wss.on('connection', (ws, req) => {
  try {
    const url = new URL(req.url, 'http://localhost'); // path –∏ query
    const clientId = url.searchParams.get('clientId');
    if (!clientId) { ws.close(1008, 'clientId required'); return; }

    let set = hub.get(clientId);
    if (!set) { set = new Set(); hub.set(clientId, set); }
    set.add(ws);

    ws.on('close', () => {
      const s = hub.get(clientId);
      if (!s) return;
      s.delete(ws);
      if (!s.size) hub.delete(clientId);
    });
  } catch {
    try { ws.close(); } catch {}
  }
});

function pushToClient(clientId, payload) {
  const set = hub.get(clientId);
  if (!set || !set.size) return;
  
  const data = JSON.stringify(payload);
  for (const ws of set) {
    try { 
      ws.send(data); 
    } catch (error) {
      console.error('‚ùå WebSocket send failed:', error);
    }
  }
}

// –°—Ç–∞—Ä—Ç
server.listen(PORT, () => {
  console.log('üöÄ SnapTalk Server listening on port', PORT);
  console.log('üîß Environment check:');
  console.log('  - BOT_TOKEN:', BOT_TOKEN ? 'SET' : 'NOT SET');
  console.log('  - SUPERGROUP_ID:', SUPERGROUP_ID || 'NOT SET');
  console.log('  - WEBHOOK_SECRET:', WEBHOOK_SECRET || 'NOT SET');
  console.log('  - SUPABASE_URL:', SUPABASE_URL ? 'SET' : 'NOT SET');
  console.log('  - SUPABASE_SERVICE_ROLE:', SUPABASE_SERVICE_ROLE ? 'SET' : 'NOT SET');
  console.log('  - SUPABASE_ANON_KEY:', SUPABASE_ANON_KEY ? 'SET' : 'NOT SET');
  console.log('üì° Webhook URL: /telegram/webhook/' + WEBHOOK_SECRET);
  console.log('üéØ SnapTalk Frontend integration:', sbAuth ? 'ENABLED' : 'DISABLED');
  console.log('üîó CORS allowed origins:', allowedOrigins.join(', '));
});
